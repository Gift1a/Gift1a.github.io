<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>汇编</title>
      <link href="/2022/01/19/%E6%B1%87%E7%BC%96/"/>
      <url>/2022/01/19/%E6%B1%87%E7%BC%96/</url>
      
        <content type="html"><![CDATA[<h1 id="堆栈图"><a href="#堆栈图" class="headerlink" title="堆栈图"></a>堆栈图</h1><p>调用函数实现两数相加</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642592553591.png"></p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642592569833.png"></p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642592579671.png"></p><p>因为pop之后，有一部分的值还是之前保留下来的，所以要进行填充</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642592639529.png"></p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642592648442.png"></p><h1 id="LEA和MOV的区别"><a href="#LEA和MOV的区别" class="headerlink" title="LEA和MOV的区别"></a>LEA和MOV的区别</h1><p>lea是“load effective address”的缩写，简单的说，lea指令可以用来将一个内存地址直接赋给目的操作数，例如：</p><p>lea eax,[ebx+8]就是将ebx+8这个值直接赋给eax，而不是把ebx+8处的内存地址里的数据赋给eax。</p><p>而mov指令则恰恰相反，例如：</p><p>mov eax,[ebx+8]则是把内存地址为ebx+8处的数据赋给eax。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Z3</title>
      <link href="/2022/01/17/Z3/"/>
      <url>/2022/01/17/Z3/</url>
      
        <content type="html"><![CDATA[<p>先来看官方文档</p><p><a href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm">https://ericpony.github.io/z3py-tutorial/guide-examples.htm</a></p><p>这个博客也不错</p><p><a href="https://blog.csdn.net/qq_38154820/article/details/108656598">https://blog.csdn.net/qq_38154820/article/details/108656598</a></p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>  基本语句</p><p>Op    Mnmonics    Description<br>            0    true    恒真<br>            1    flase    恒假<br>            2    =    相等<br>            3    distinct    不同<br>            4    ite    if-then-else<br>            5    and    n元 合取（其中条件必须全部满足）<br>            6    or    n元 析取（其中条件满足之一即可）<br>            7    iff    implication<br>            8    xor    异或<br>            9    not    否定<br>            10    implies    Bi-implications</p><p>1、创建容器</p><p>s=Solver()</p><p>2、创建变量，变量有Int(整型)、BitVector(字节)、数组</p><p>3、添加约束条件</p><p>s.add(约束条件)，需要注意Int不能进行移位运算，python除是//</p><p>4、判断是否存在</p><pre class="language-python" data-language="python"><code class="language-python">if s.check() == sat:      m = s.model()      print(m)else:      print("no answer")</code></pre><h1 id="变量为整型"><a href="#变量为整型" class="headerlink" title="变量为整型"></a>变量为整型</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]Universe_final_answer">https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]Universe_final_answer</a></p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p><img src="/2022/01/17/Z3/1642416626641.png"></p><p>这里就直接放脚本了</p><pre class="language-python" data-language="python"><code class="language-python">from z3 import*s=Solver()v1=Int('v1')v2=Int('v2')v3=Int('v3')v4=Int('v4')v5=Int('v5')v6=Int('v6')v7=Int('v7')v8=Int('v8')v9=Int('v9')v11=Int('v11')s.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)s.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)s.add(-103 * v11 + 120 * v8 + 108 * v7 + 48 * v4 + -89 * v3 + 78 * v1 - 41 * v2 + 31 * v5 - (v6 *64) - 120 * v9 == -10283)s.add(71 * v6 + (v7 *128) + 99 * v5 + -111 * v3 + 85 * v1 + 79 * v2 - 30 * v4 - 119 * v8 + 48 * v9 - 16 * v11 == 22855)s.add(5 * v11 + 23 * v9 + 122 * v8 + -19 * v6 + 99 * v7 + -117 * v5 + -69 * v3 + 22 * v1 - 98 * v2 + 10 * v4 == -2944)s.add(-54 * v11 + -23 * v8 + -82 * v3 + -85 * v2 + 124 * v1 - 11 * v4 - 8 * v5 - 60 * v7 + 95 * v6 + 100 * v9 == -2222)s.add(-83 * v11 + -111 * v7 + -57 * v2 + 41 * v1 + 73 * v3 - 18 * v4 + 26 * v5 + 16 * v6 + 77 * v8 - 63 * v9 == -13258)s.add(81 * v11 + -48 * v9 + 66 * v8 + -104 * v6 + -121 * v7 + 95 * v5 + 85 * v4 + 60 * v3 + -85 * v2 + 80 * v1 == -1559)s.add(101 * v11 + -85 * v9 + 7 * v6 + 117 * v7 + -83 * v5 + -101 * v4 + 90 * v3 + -28 * v1 + 18 * v2 - v8 == 6308)s.add(99 * v11 + -28 * v9 + 5 * v8 + 93 * v6 + -18 * v7 + -127 * v5 + 6 * v4 + -9 * v3 + -93 * v1 + 58 * v2 == -1697)if s.check()==sat:    result=s.model()print(result)</code></pre><h1 id="变量为数组"><a href="#变量为数组" class="headerlink" title="变量为数组"></a>变量为数组</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#[GWCTF%202019]xxor">https://buuoj.cn/challenges#[GWCTF%202019]xxor</a></p><h2 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h2><p><img src="/2022/01/17/Z3/1642417350041.png"></p><pre class="language-python" data-language="python"><code class="language-python">from z3 import*#添加六个Int数据到s变量中s = [Int('s%d' % i) for i in range(6)]a=Solver()#多个约束条件可以使用逗号间隔a.add(s[2]-s[3]==2225223423,s[3]+s[4]==4201428739,s[2]-s[4]==1121399208,s[0]==0xdf48ef7e,s[5]==0x84f30420,s[1]==0x20caacf4)if a.check() == sat:    print(a.model())</code></pre><p>这样得到的结果不会是数组的形式，如下得到的是数组形式</p><p><img src="/2022/01/17/Z3/1642418166049.png"></p><h1 id="数独问题"><a href="#数独问题" class="headerlink" title="数独问题"></a>数独问题</h1><p>数独问题就是9×9的方块填数（只能是1-9），分成3×3的小方块，行列数字不同，每个小方块数字不能重复</p><p>先贴一下</p><pre class="language-python" data-language="python"><code class="language-python">from z3 import *# 9x9整数变量矩阵X = [ [ Int("x_%s_%s" % (i+1, j+1)) for j in range(9) ]      for i in range(9) ]  # 每个单元格包含{1，…，9}中的值cells_c  = [ And(1 &lt;= X[i][j], X[i][j] &lt;= 9)             for i in range(9) for j in range(9) ]  # 每行最多包含一个数字一次rows_c   = [ Distinct(X[i]) for i in range(9) ]  # 每列最多包含一个数字cols_c   = [ Distinct([ X[i][j] for i in range(9) ])             for j in range(9) ]  # 每个3x3正方形最多包含一个数字sq_c     = [ Distinct([ X[3*i0 + i][3*j0 + j]                        for i in range(3) for j in range(3) ])             for i0 in range(3) for j0 in range(3) ]  sudoku_c = cells_c + rows_c + cols_c + sq_c  # 数独实例，我们用'0'表示空单元格instance = ((0,0,0,0,9,4,0,3,0),            (0,0,0,5,1,0,0,0,7),            (0,8,9,0,0,0,0,4,0),            (0,0,0,0,0,0,2,0,8),            (0,6,0,2,0,1,0,5,0),            (1,0,2,0,0,0,0,0,0),            (0,7,0,0,0,0,5,2,0),            (9,0,0,0,6,5,0,0,0),            (0,4,0,9,7,0,0,0,0))  instance_c = [ If(instance[i][j] == 0,                  True,                  X[i][j] == instance[i][j])               for i in range(9) for j in range(9) ]  s = Solver()s.add(sudoku_c + instance_c)if s.check() == sat:    m = s.model()    r = [ [ m.evaluate(X[i][j]) for j in range(9) ]          for i in range(9) ]    print_matrix(r)else:    print("failed to solve")</code></pre><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>这是改了的数独，比较简单，拿来练练手</p><p><a href="https://buuoj.cn/challenges#[GUET-CTF2019]number_game">https://buuoj.cn/challenges#[GUET-CTF2019]number_game</a></p><h2 id="Z3在题目的运用"><a href="#Z3在题目的运用" class="headerlink" title="Z3在题目的运用"></a>Z3在题目的运用</h2><pre class="language-python" data-language="python"><code class="language-python">from z3 import *# 5*5整数变量矩阵X = [[Int("x_%s_%s" % (i + 1, j + 1)) for j in range(5)]     for i in range(5)]# 每个单元格包含{0，…，4}中的值cells_c = [And(0 &lt;= X[i][j], X[i][j] &lt;= 4)           for i in range(5) for j in range(5)]# 每行最多包含一个数字一次rows_c = [Distinct(X[i]) for i in range(5)]# 每列最多包含一个数字cols_c = [Distinct([X[i][j] for i in range(5)])          for j in range(5)]# 每个5x5正方形最多包含一个数字,i0和j0表示分为几组sq_c = [Distinct([X[5 * i0 + i][5 * j0 + j]                  for i in range(5) for j in range(5)])        for i0 in range(0) for j0 in range(0)]sudoku_c = cells_c + rows_c + cols_c + sq_c# 数独实例，我们用'5'表示空单元格instance = ((1,4,5,2,3),(3,0,5,1,5),(0,5,2,3,5),(5,3,5,5,5),(4,2,5,5,1))instance_c = [If(instance[i][j] == 5,                 True,                 X[i][j] == instance[i][j])              for i in range(5) for j in range(5)]s = Solver()s.add(sudoku_c + instance_c)if s.check() == sat:    m = s.model()    r = [[m.evaluate(X[i][j]) for j in range(5)]         for i in range(5)]    print_matrix(r)else:    print("failed to solve")</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>花指令</title>
      <link href="/2022/01/17/%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/01/17/%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.anquanke.com/post/id/208682">https://www.anquanke.com/post/id/208682</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SMC</title>
      <link href="/2022/01/17/SMC/"/>
      <url>/2022/01/17/SMC/</url>
      
        <content type="html"><![CDATA[<p>参考文章：<a href="https://www.anquanke.com/post/id/238645">https://www.anquanke.com/post/id/238645</a></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>SMC，是self-modifying-code的缩写 ，即自我修改的代码，通过程序运行后执行相关代码功能，对加密的代码数据进行解密，让其恢复正常功能</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>1、要有两个函数，一个用于加密，一个用于解密，两个是对应的</p><p>2、找到要SMC的代码地址，然后提前在程序开始的地方设置对该地址数据的解密函数</p><p>3、取出要进行SMC的代码的字节码，对其使用准备好的加密函数进行加密</p><p>4、用这串加密的数据替换原代码的字节码</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://buuoj.cn/challenges#[%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84]jocker">https://buuoj.cn/challenges#[%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84]jocker</a></p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>打开ida反编译看到</p><p><img src="/2022/01/17/SMC/1642563702820.png"></p><p>点进这个函数ida直接报错</p><p><img src="/2022/01/17/SMC/1642563778289.png"></p><p>查看汇编代码</p><p><img src="/2022/01/17/SMC/1642563800178.png"></p><p>点击函数跟进</p><p><img src="/2022/01/17/SMC/1642563901545.png"></p><p>发现一长串没被识别的数据段，这种情况可能是花指令导致，也可能是SMC，结合之前有一个循环异或，可以猜测是SMC，接下来有两种方法解密 </p><h2 id="使用IDC对加密数据进行解密"><a href="#使用IDC对加密数据进行解密" class="headerlink" title="使用IDC对加密数据进行解密"></a>使用IDC对加密数据进行解密</h2><p>首先要找到被加密数据段的初始地址以及加密数据段的长度，这里长度在for循环里面，初始位置</p><p><img src="/2022/01/17/SMC/1642566995107.png"></p><p>点击函数跳转</p><p><img src="/2022/01/17/SMC/1642567097998.png"></p><p>黄色段就是初始地址，可以看到这里函数入口并不是pop开始，所以也可以猜到被加密了</p><p>idc脚本如下(shift+f2)打开</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;idc.idc&gt;static main(){    auto addr = 0x401500;    auto i = 0;    for(i=0;i&lt;187;i++)    {        PatchByte(addr+i,Byte(addr+i)^0x41);    }}</code></pre><p>得到了解密的数据段</p><p><img src="/2022/01/17/SMC/1642567365432.png"></p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>因为程序自带解密函数，只需要在解密函数后面下断点，运行到断点处，被加密的数据段就能成功解密</p><p><img src="/2022/01/17/SMC/1642565058450.png"></p><p>这是未解密的，运行后</p><p><img src="/2022/01/17/SMC/1642565236932.png"></p><p>这时候只需要先对函数按U，取消定义，然后选中按C——force转为汇编代码</p><p><img src="/2022/01/17/SMC/1642565348450.png"></p><p>然后按p定义成函数，再按F5就可以正常反编译了</p><p><img src="/2022/01/17/SMC/1642565393714.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zip</title>
      <link href="/2022/01/15/zip/"/>
      <url>/2022/01/15/zip/</url>
      
        <content type="html"><![CDATA[<h1 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h1><h2 id="伪加密原理及操作"><a href="#伪加密原理及操作" class="headerlink" title="伪加密原理及操作"></a>伪加密原理及操作</h2><h3 id="zip文件组成"><a href="#zip文件组成" class="headerlink" title="zip文件组成"></a>zip文件组成</h3><p>可以去里面看看，挺全的</p><p><a href="https://blog.csdn.net/qq_26187985/article/details/83654197">https://blog.csdn.net/qq_26187985/article/details/83654197</a></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>这里找了一道大佬出的题，适合练练手</p><p>《美丽的烟火》</p><p>链接：<a href="http://ctf.bugku.com/challenges/detail/id/350.html">http://ctf.bugku.com/challenges/detail/id/350.html</a></p><p>直接打开压缩包，可以得到被加密的文件</p><p><img src="/2022/01/15/zip/1642245880907.png"></p><p>痛苦，一般这种没有提示的(下面会有介绍)，一般就是伪加密了。</p><p>拖进winhex，搜索504b0102（不知道为什么的速速去看前面那篇文章），这个按钮</p><p><img src="/2022/01/15/zip/1642246321198.png"></p><p>把09改成00，要仔细，这里有两个，我开始只看到一个</p><p><img src="/2022/01/15/zip/1642246469204.png"></p><p><img src="/2022/01/15/zip/1642246506196.png"></p><p>重新打开压缩包</p><p><img src="/2022/01/15/zip/1642246638206.png"></p><p>心情愉悦~</p><p>接下来就是进行解密了</p><p>这里不细讲了，不然就跑偏了，png文件是stegpy隐写，密码是shumu，stegpy安装应该会有问题，具体安装请看图片隐写</p><p><img src="/2022/01/15/zip/1642246877362.png"></p><p>password解密是base64，base58，栅栏，</p><p>这里推荐一篇博客</p><p>得到的字符串是aes的key，然后直接aes在线解密</p><p><img src="/2022/01/15/zip/1642247152438.png"></p><p>flag：flag{yX73nAutbBozYhge6d2flG}</p><p>网站也放这了：<a href="https://the-x.cn/cryptography/Aes.aspx">https://the-x.cn/cryptography/Aes.aspx</a></p><h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><p>winrar可以修复伪加密，不过是部分的</p><p><img src="/2022/01/15/zip/1642251859085.png"></p><p>点开上面的工具-&gt; 修复压缩文件</p><h1 id="套娃压缩包"><a href="#套娃压缩包" class="headerlink" title="套娃压缩包"></a>套娃压缩包</h1><p>顾名思义，就是压缩包套娃</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://buuoj.cn/challenges#[MRCTF2020]%E5%8D%83%E5%B1%82%E5%A5%97%E8%B7%AF">https://buuoj.cn/challenges#[MRCTF2020]%E5%8D%83%E5%B1%82%E5%A5%97%E8%B7%AF</a></p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><pre class="language-python" data-language="python"><code class="language-python">from PIL import Imagex = y = 200img = Image.new("RGB",(x,y))file = open('./qr.txt','r')for width in range(0,x):    for height in range(0,y):        line = file.readline()        rgb = line.replace('(','').replace(')','').split(',')        img.putpixel((width,height),(int(rgb[0]),int(rgb[1]),int(rgb[2])))img.save('flag.jpg')</code></pre><h1 id="CRC32爆破"><a href="#CRC32爆破" class="headerlink" title="CRC32爆破"></a>CRC32爆破</h1><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>CRC校验实用程序库 在数据存储和数据通讯领域，为了保证数据的正确，就不得不采用检错的手段。在诸多检错手段中，CRC是最著名的一种。CRC的全称是循环冗余校验。(这里还不是很懂，后续再看)</p><p>总之每个文件都有唯一的CRC32值，即便数据中一个bit发生变化，也会导致CRC32值不同。若是知道一段数据的长度和CRC32值，便可穷举数据，与其CRC32对照，以此达到暴力猜解的目的。但通常只适用于较小文本文件。</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>打开里面有很多压缩包，里面存储的都是小数据文件</p><p><img src="/2022/01/15/zip/1642249237942.png"></p><p><img src="/2022/01/15/zip/1642249207274.png"></p><p>直接上脚本(不是很会)</p><pre class="language-python" data-language="python"><code class="language-python">#python3import zipfileimport stringimport binasciidef CrackCrc(crc):for i in dic:for j in dic:for k in dic:for h in dic:s = i + j + k + hif crc == (binascii.crc32(s.encode())):f.write(s)returndef CrackZip():for i in range(0,68):file = 'D:\\new\\新建文件夹\\out'+str(i)+'.zip'crc = zipfile.ZipFile(file,'r').getinfo('data.txt').CRCCrackCrc(crc)print('\r'+"loading：{:%}".format(float((i+1)/68)),end='')dic = string.ascii_letters + string.digits + '+/='f = open('printaaa.txt','w')print("\nCRC32begin")CrackZip()print("CRC32finished")f.close()</code></pre><p>得到base64编码的东西</p><pre class="language-none"><code class="language-none">z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA==</code></pre><p>网站在线解码，这个网站挺好的，可以直接转换文件</p><p><a href="https://the-x.cn/base64/">https://the-x.cn/base64/</a></p><p>解码后在尾部看到这句话</p><p><img src="/2022/01/15/zip/1642250774952.png"></p><p>他让我们修复文件，所以我们首先要先了解文件头和尾</p><p><a href="https://blog.csdn.net/Ahuuua/article/details/109165473?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-2.queryctrv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-2.queryctrv2">https://blog.csdn.net/Ahuuua/article/details/109165473?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-2.queryctrv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-2.queryctrv2</a></p><p>修补好rar文件头在注释里得到flag</p><p>flag{nev3r_enc0de_t00_sm4ll_fil3_w1th_zip}</p><h1 id="压缩文件带注释"><a href="#压缩文件带注释" class="headerlink" title="压缩文件带注释"></a>压缩文件带注释</h1><p>有一些题目会在注释里面添加信息，直观的就不说了，现在说两种空白符，Whitespace <a href="https://vii5ard.github.io/whitespace/">https://vii5ard.github.io/whitespace/</a> 和snow隐写，snow需要密码，有可执行文件</p><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.yunyansec.com/#/experiment/expdetail/3">https://www.yunyansec.com/#/experiment/expdetail/3</a></p><p>无字天书</p><h2 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h2><p>得到流量包，导出HTTP对象</p><p>得到几个文件，依次查看，注意要仔细看，流量包文件有时候会很多</p><p><img src="/2022/01/15/zip/1642254197336.png"></p><p>发现了504b0304，可以写脚本，也可以直接网站解码得到压缩包</p><p><a href="https://the-x.cn/zh-cn/encodings/Hex.aspx">https://the-x.cn/zh-cn/encodings/Hex.aspx</a></p><p><img src="/2022/01/15/zip/1642254255927.png"></p><p>也可以使用脚本</p><pre class="language-python" data-language="python"><code class="language-python">s='填写16进制数据'import binasciiout=open('2.jpg','wb')out.write(binascii.unhexlify(s))out.close()#Author: MoChu7import structa = open("str.txt","r")#十六进制数据文件lines = a.read()res = [lines[i:i+2] for i in range(0,len(lines),2)]with open("res.jpg","wb") as f:for i in res:s = struct.pack('B',int(i,16))f.write(s)</code></pre><p>打开之后得到两个文件，打开里面什么都看不到，全选就会有显示，key.ws应该是snow的密码，拿去whitespace解密</p><p><img src="/2022/01/15/zip/1642254325041.png"></p><p>然后snow解密 命令：SNOW.EXE -p 密码 -C 文件</p><p><img src="/2022/01/15/zip/1642254470293.png"></p><p>cazy{C4n_y0u_underSt4nd_th3_b0oK_With0ut_Str1ng}</p><h1 id="爆破压缩包"><a href="#爆破压缩包" class="headerlink" title="爆破压缩包"></a>爆破压缩包</h1><p>使用工具爆破，如Advanced Archive Password Recovery</p><h2 id="已知明文攻击"><a href="#已知明文攻击" class="headerlink" title="已知明文攻击"></a>已知明文攻击</h2><h2 id="掩码攻击"><a href="#掩码攻击" class="headerlink" title="掩码攻击"></a>掩码攻击</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文档隐写</title>
      <link href="/2022/01/15/%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99/"/>
      <url>/2022/01/15/%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>可以看看这篇<a href="https://xz.aliyun.com/t/1883/">https://xz.aliyun.com/t/1883/</a></p><h1 id="WORD"><a href="#WORD" class="headerlink" title="WORD"></a>WORD</h1><h2 id="xml隐藏信息"><a href="#xml隐藏信息" class="headerlink" title="xml隐藏信息"></a>xml隐藏信息</h2><h2 id="隐藏文字"><a href="#隐藏文字" class="headerlink" title="隐藏文字"></a>隐藏文字</h2><h2 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h2><h1 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h1><h2 id="图片遮挡"><a href="#图片遮挡" class="headerlink" title="图片遮挡"></a>图片遮挡</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>视频隐写</title>
      <link href="/2022/01/15/%E8%A7%86%E9%A2%91%E9%9A%90%E5%86%99/"/>
      <url>/2022/01/15/%E8%A7%86%E9%A2%91%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Kinovea"><a href="#Kinovea" class="headerlink" title="Kinovea"></a>Kinovea</h1><p>可以一帧一帧地看视频，视频隐写目前只接触到在视频一些 帧里面藏信息</p><p><a href="https://mochu.blog.csdn.net/article/details/109461931">https://mochu.blog.csdn.net/article/details/109461931</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>流量分析</title>
      <link href="/2022/01/15/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>/2022/01/15/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>只试过直接导出HTTP流对象</p><p><img src="/2022/01/15/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/1642297780618.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内存取证</title>
      <link href="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
      <url>/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>volatility是内存取证的工具，这里我使用的是打包好了的可执行文件</p><p>volatility下载地址：<a href="https://www.volatilityfoundation.org/releases">https://www.volatilityfoundation.org/releases</a></p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642229196730.png"></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>题目链接：</p><p><a href="https://www.yunyansec.com/#/experiment/expdetail/3">https://www.yunyansec.com/#/experiment/expdetail/3</a></p><p>朴实无华的取证</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h2><p>先使用命令volatility -f 朴实无华的取证.raw iamgeinfo查看系统信息</p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642230119786.png"></p><p>上面的系统都有可能，主要是第一个</p><h2 id="查看运行程序列表"><a href="#查看运行程序列表" class="headerlink" title="查看运行程序列表"></a>查看运行程序列表</h2><p>命令：volatility -f 朴实无华的取证.raw –profile=WinXPSP2x86 pslist</p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642230482092.png"></p><p>这里有三处需要注意，mspaint是画图工具，360zip是解压工具，notepad是笔记本，接下来重点放在这几处</p><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>命令：volatility -f 朴实无华的取证.raw –profile=WinXPSP2x86  filescan，这里可以使用grep来指定搜索的字符串 格式如下：volatility -f 朴实无华的取证.raw –profile=WinXPSP2x86  filescan | grep flag</p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642230787104.png"></p><p>可以看到过滤出了flag的相关数据</p><h2 id="提取文件"><a href="#提取文件" class="headerlink" title="提取文件"></a>提取文件</h2><p>接下来需要把文件dump下来，命令：volatility -f 朴实无华的取证.raw –profile=WinXPSP2x86 dumpfiles -Q 偏移量 -D ./(-D指定文件夹，这里aaa表示存储到aaa文件夹中)</p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642231017652.png"></p><p>可以在aaa文件夹中找到dump下来的文件</p><p>得到<img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642231186454.png"></p><p>还有一个加了密的zip文件，这时候注意我们的notepad还没有被使用，可以去看看信息</p><h2 id="打开进程"><a href="#打开进程" class="headerlink" title="打开进程"></a>打开进程</h2><p>命令：volatility -f 朴实无华的取证.raw –profile=WinXPSP2x86 notepad</p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642231403984.png"></p><p>这样就得到了encrypt的密码</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;string.h&gt; int main(){char str[]="FDCB[8LDQ?ZLOO?FHUWDLQ)B?VXFFHHG?LQ?ILJKWLQJ?WKH?HSLGHPLF]";for(int i = 0; i &lt; strlen(str); i++){str[i] += 32;if(str[i] &gt;='a'+3 &amp;&amp; str[i]&lt;='w'+3)str[i]-=3;else if(str[i]=='a')str[i]='x';else if(str[i]=='b')str[i]='y';else if(str[i]=='c')str[i]='z';else if(str[i]=='|')str[i]='_';}printf("%s",str);return 0;}</code></pre><p>得到flag：cazy{Xian_will_certainIy_succeed_in_fighting_the_epidemic}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>音频隐写</title>
      <link href="/2022/01/15/%E9%9F%B3%E9%A2%91%E9%9A%90%E5%86%99/"/>
      <url>/2022/01/15/%E9%9F%B3%E9%A2%91%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>在这篇文章：<a href="https://blog.csdn.net/vanarrow/article/details/105667244">https://blog.csdn.net/vanarrow/article/details/105667244</a></p><h1 id="摩斯电码"><a href="#摩斯电码" class="headerlink" title="摩斯电码"></a>摩斯电码</h1><h1 id="MP3steg"><a href="#MP3steg" class="headerlink" title="MP3steg"></a>MP3steg</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图片隐写</title>
      <link href="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/"/>
      <url>/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="PNG和JPG文件结构"><a href="#PNG和JPG文件结构" class="headerlink" title="PNG和JPG文件结构"></a>PNG和JPG文件结构</h1><p>PNG：<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html">https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html</a>   （有题目需要修改PNG宽高），结尾是IEND</p><p>JPG：<a href="https://www.cnblogs.com/bandy/p/4956086.html">https://www.cnblogs.com/bandy/p/4956086.html</a></p><p>jpg的一些隐写：<a href="https://zhuanlan.zhihu.com/p/24054040">https://zhuanlan.zhihu.com/p/24054040</a></p><p>无论是png还是jpg，只会识别到文件尾，所以可以在文件尾加入信息</p><h1 id="F5隐写"><a href="#F5隐写" class="headerlink" title="F5隐写"></a>F5隐写</h1><h1 id="Stegpy隐写"><a href="#Stegpy隐写" class="headerlink" title="Stegpy隐写"></a>Stegpy隐写</h1><p>之前有过题了，就不说了，讲讲下载</p><p>看这篇就够了</p><p><a href="https://blog.csdn.net/Amherstieae/article/details/109010064">https://blog.csdn.net/Amherstieae/article/details/109010064</a></p><h1 id="Steghide"><a href="#Steghide" class="headerlink" title="Steghide"></a>Steghide</h1><p><a href="https://www.jianshu.com/p/c3679f805a0c">https://www.jianshu.com/p/c3679f805a0c</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#%E4%B9%9D%E8%BF%9E%E7%8E%AF">https://buuoj.cn/challenges#%E4%B9%9D%E8%BF%9E%E7%8E%AF</a></p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>binwalk分解文件</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642302431480.png"></p><p>伪加密</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642302894034.png"></p><p>得到图片和加密压缩包</p><p>对图片使用steghide</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642302996915.png"></p><p>steghide info 文件查看隐藏信息，输入y后提取，也可以直接：steghide extract 文件 </p><p>找到ko.txt,得到压缩包密码</p><p>flag{1RTo8w@&amp;4nK@z*XL}</p><h1 id="Binwalk、Winrar——图片隐藏文件"><a href="#Binwalk、Winrar——图片隐藏文件" class="headerlink" title="Binwalk、Winrar——图片隐藏文件"></a>Binwalk、Winrar——图片隐藏文件</h1><p>binwalk使用：<a href="https://blog.csdn.net/wxh0000mm/article/details/85683661">https://blog.csdn.net/wxh0000mm/article/details/85683661</a></p><p>可以直接binwalk提取文件，命令：binwalk -e 文件，这个比较常见，就不说了</p><p>winrar也可以直接打开被隐藏的文件</p><h1 id="修改图片宽高"><a href="#修改图片宽高" class="headerlink" title="修改图片宽高"></a>修改图片宽高</h1><pre class="language-python" data-language="python"><code class="language-python">import binasciiimport structimport sysfile = input("图片地址：")fr = open(file,'rb').read()data = bytearray(fr[0x0c:0x1d])crc32key = eval('0x'+str(binascii.b2a_hex(fr[0x1d:0x21]))[2:-1])#原来的代码: crc32key = eval(str(fr[29:33]).replace('\\x','').replace("b'",'0x').replace("'",''))n = 4095for w in range(n):    width = bytearray(struct.pack('&gt;i', w))    for h in range(n):        height = bytearray(struct.pack('&gt;i', h))        for x in range(4):            data[x+4] = width[x]            data[x+8] = height[x]        crc32result = binascii.crc32(data) &amp; 0xffffffff        if crc32result == crc32key:            print(width,height)            newpic = bytearray(fr)            for x in range(4):                newpic[x+16] = width[x]                newpic[x+20] = height[x]            fw = open(file+'.png','wb')            fw.write(newpic)            fw.close            sys.exit()</code></pre><h1 id="二进制转二维码"><a href="#二进制转二维码" class="headerlink" title="二进制转二维码"></a>二进制转二维码</h1><pre class="language-python" data-language="python"><code class="language-python">from PIL import Imagefrom zlib import *MAX = 25pic = Image.new("RGB",(MAX,MAX))str ='''0000000001110010000000000000000000001111010000000000000000011100010000000000000000010111100000000000000000001010101000000000000000000011000101000000000000000010101010100000000000000000100000110000000011000111011101101000110000001000010110010010010100010011110100001110111001100111101001010110010010011000001001100001001101000111100011111101110010100010110111110011011111101111000110110010010101101100100011110011111111111011100000000101100011000101000000000010010100101010001000000001010101010001100100000000001001111111100100000000000011001011110111000000000100110010010000100000000110000110110110010000000011010000101110101'''i=0for y in range(0,MAX):    for x in range(0,MAX):        if(str[i] == '1'):            pic.putpixel([x,y],(0,0,0))        else:pic.putpixel([x,y],(255,255,255))        i = i+1pic.show()pic.save("flag.png")</code></pre><h1 id="坐标画图"><a href="#坐标画图" class="headerlink" title="坐标画图"></a>坐标画图</h1><h2 id="gnuplot"><a href="#gnuplot" class="headerlink" title="gnuplot"></a>gnuplot</h2><p>linux，直接sudo apt install gnuplot，使用 直接gnuplot进入后，plot 文件名，就可以了</p><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#%E6%A2%85%E8%8A%B1%E9%A6%99%E4%B9%8B%E8%8B%A6%E5%AF%92%E6%9D%A5">https://buuoj.cn/challenges#%E6%A2%85%E8%8A%B1%E9%A6%99%E4%B9%8B%E8%8B%A6%E5%AF%92%E6%9D%A5</a></p><h2 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h2><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642300357300.png"></p><p>在文件尾之后发现大量十六进制数据，这里我使用010editor复制，这样比较快，复制后转为字符</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642300558126.png"></p><p>这样的格式不能被识别，所以需要替换，我使用的是VS</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642301030524.png"></p><p>替换这里不用填写，直接替换全部，然后保存到txt中，再使用工具</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642301392143.png"></p><h1 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h1><p>在stegsolve可以实现，逐帧查看，注意不要漏了</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642304858835.png"></p><h1 id="LSB隐写"><a href="#LSB隐写" class="headerlink" title="LSB隐写"></a>LSB隐写</h1><h1 id="文件头尾倒置"><a href="#文件头尾倒置" class="headerlink" title="文件头尾倒置"></a>文件头尾倒置</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.yunyansec.com/#/experiment/expdetail/3">https://www.yunyansec.com/#/experiment/expdetail/3</a></p><p>pipicc</p><h2 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h2><p>得到一张图片</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642303873774.png"></p><p>有噪点，应该是修改了像素点，是需要修复的</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306122403.png"></p><p>缺少png文件头，修补文件头</p><p>接下来找到IEND块,将多余部分删去，改为png</p><p>得到</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306518311.png"></p><p>拖进stegsolve</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306719043.png"></p><p>在蓝色低位发现了d9ff，这正好是jpg的文件尾反过来，save bin 下来，搜索d8ff，对应倒置的文件头</p><p>010editor有工具</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306907507.png"></p><p>需要安装</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306934016.png"></p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306975753.png"></p><p>逆序后保存改为jpg后缀，得到图片</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642307072291.png"></p><p>也可以使用脚本</p><pre class="language-python" data-language="python"><code class="language-python">input = open('D:\\new\\5', 'rb')input_all = input.read()ss = input_all[::-1]output = open('m0re.jpg', 'wb')output.write(ss)input.close()output.close()</code></pre><h1 id="Base64隐写"><a href="#Base64隐写" class="headerlink" title="Base64隐写"></a>Base64隐写</h1><pre class="language-python" data-language="python"><code class="language-python">import base64path = input("请输入加密文件路径\n")file = open(path)a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"aaa = ''while True:    text = file.readline()  # 只读取一行内容    # 判断是否读取到内容    text = text.replace("\n", "")    if not text:        break    if text.count('=') == 1:        aaa = aaa + \            str('{:02b}'.format((a.find(text[len(text)-2])) % 4))    if text.count('=') == 2:        aaa = aaa + \            str('{:04b}'.format((a.find(text[len(text)-3])) % 16))file.close()t = ""ttt = len(aaa)ttt = ttt//8*8for i in range(0,ttt,8):    t = t + chr(int( aaa[i:i+8],2))print(t)</code></pre><h1 id="StegSolve"><a href="#StegSolve" class="headerlink" title="StegSolve"></a>StegSolve</h1><h2 id="两张图片拼接"><a href="#两张图片拼接" class="headerlink" title="两张图片拼接"></a>两张图片拼接</h2><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642312404099.png"></p><p>提取http对象</p><p>把scanlines拖进stegsolve，在多个通道发现了一条横线</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642312485498.png"></p><p>而logo正好缺了一段</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642312592372.png"></p><p>使用stegsolve的图像结合</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642312633974.png"></p><p>得到flag</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642312671617.png"></p><h1 id="添加文件头"><a href="#添加文件头" class="headerlink" title="添加文件头"></a>添加文件头</h1><h1 id="文件属性藏信息"><a href="#文件属性藏信息" class="headerlink" title="文件属性藏信息"></a>文件属性藏信息</h1><p>图片属性可以隐藏信息</p><h1 id="outguess隐写"><a href="#outguess隐写" class="headerlink" title="outguess隐写"></a>outguess隐写</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#[WUSTCTF2020]alison_likes_jojo">https://buuoj.cn/challenges#[WUSTCTF2020]alison_likes_jojo</a></p><h2 id="解题过程-3"><a href="#解题过程-3" class="headerlink" title="解题过程"></a>解题过程</h2><p>binwalk分解boki.png得到压缩包，是真加密</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642311449760.png"></p><p>尝试爆破</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642311499706.png"></p><p>得到一段字符串</p><p>base64三次得到killerqueen</p><p>另一张图片是outguess隐写</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642311787198.png"></p><p>打开flag1.txt文件</p><p>wctf2020{pretty_girl_alison_likes_jojo}</p><h1 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h1><h2 id="BlindWaterMark"><a href="#BlindWaterMark" class="headerlink" title="BlindWaterMark"></a>BlindWaterMark</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>A&amp;D1</title>
      <link href="/2021/12/27/A-D1/"/>
      <url>/2021/12/27/A-D1/</url>
      
        <content type="html"><![CDATA[<h1 id="IsDebugger-Present"><a href="#IsDebugger-Present" class="headerlink" title="IsDebugger Present"></a>IsDebugger Present</h1><p><strong>原理</strong></p><hr><p>​          反调试，该API查询PEB结构中的IsDebugger标志位， 未调试返回0，调试状态返回1。</p><p><strong>绕过</strong></p><hr><ol><li><p>nop指令</p> <pre class="language-none"><code class="language-none">mov rax ; IsDebuggerPresentcall rax ; IsDebuggerPresent</code></pre></li><li><p>jnz和jz</p><hr><p> jnz在结果不为0时跳转，jz在结果为0时跳转</p> <pre class="language-none"><code class="language-none">sub_4019F4(){    return ISDebuggerPresent;}if(!sub_4019F4){     puts();}</code></pre><p> 这个时候如果处于调试状态，返回1，不会执行put，这时候只需要去汇编指令处把jnz改为jz，重新汇编后会变成</p> <pre class="language-none"><code class="language-none">sub_4019F4(){    return ISDebuggerPresent;}if(sub_4019F4){     puts();}</code></pre><p> 3.Attach to process</p> <pre class="language-none"><code class="language-none">sub_4019F4();printf("%d",n);scanf("%d",&amp;m);</code></pre><p> 可以先让程序运行，这时候已经步过了反调试函数，然后Attach to process就可以调试了</p><p> 4.修改EIP：jump、call、ret指令</p></li></ol><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ol><li><p>函数介绍</p> <pre class="language-none"><code class="language-none">1 CreateThread 创建线程2 CloseHandle 关闭线程3 WaitForSingleObject() 实现线程转换</code></pre></li></ol><p>​      2.题目——Youngter drive</p><pre class="language-none"><code class="language-none">int __cdecl main_0(int argc, const char **argv, const char **envp){  HANDLE v4; // [esp+D0h] [ebp-14h]  HANDLE hObject; // [esp+DCh] [ebp-8h]  ((void (*)(void))sub_4110FF)();  ::hObject = CreateMutexW(0, 0, 0);  j_strcpy(Destination, &amp;Source);  hObject = CreateThread(0, 0, StartAddress, 0, 0, 0);  v4 = CreateThread(0, 0, sub_41119F, 0, 0, 0);  CloseHandle(hObject);  CloseHandle(v4);  while ( dword_418008 != -1 )    ;  sub_411190();  CloseHandle(::hObject);  return 0;}</code></pre><pre class="language-none"><code class="language-none">void __stdcall StartAddress_0(int a1){  while ( 1 )  {    WaitForSingleObject(hObject, 0xFFFFFFFF);    if ( dword_418008 &gt; -1 )    {      sub_41112C(&amp;Source, dword_418008);      --dword_418008;      Sleep(0x64u);    }    ReleaseMutex(hObject);  }}</code></pre><pre class="language-none"><code class="language-none">void __stdcall sub_411B10(int a1){  while ( 1 )  {    WaitForSingleObject(hObject, 0xFFFFFFFF);    if ( dword_418008 &gt; -1 )    {      Sleep(0x64u);      --dword_418008;    }    ReleaseMutex(hObject);  }}</code></pre><p>实际上就是每隔两位对数组元素做一次处理</p><h1 id="Z3"><a href="#Z3" class="headerlink" title="Z3"></a>Z3</h1><ol><li><p>基础</p> <pre class="language-none"><code class="language-none">1 声明整数x = Int('x')2 声明实数x = Real('x')3 声明布尔类型x = Bool('x')1 创建solver求解器   例：s = Solver()2 添加约束条件   例：s.add(x+y==10)3 检查solver中的约束是否满足   例：s.check()4 利用model()输出运算结果   例：s.model()</code></pre><p> 2.题目——Universe_final_answer</p> <pre class="language-none"><code class="language-none">__int64 __fastcall main(int a1, char **a2, char **a3){  char v4[32]; // [rsp+0h] [rbp-A8h] BYREF  char input[104]; // [rsp+20h] [rbp-88h] BYREF  unsigned __int64 v6; // [rsp+88h] [rbp-20h]  v6 = __readfsqword(0x28u);  __printf_chk(1LL, "Please give me the key string:", a3);  scanf("%s", input);  if ( sub_860(input) )  {    sub_C50(input, v4);    __printf_chk(1LL, "Judgement pass! flag is actf{%s_%s}\n", input);  }  else  {    puts("False key!");  }  return 0LL;}</code></pre> <pre class="language-none"><code class="language-none">bool __fastcall sub_860(char *input){  int v1; // ecx  int v2; // esi  int v3; // edx  int v4; // er9  int v5; // er11  int v6; // ebp  int v7; // ebx  int v8; // er8  int v9; // er10  bool result; // al  int v11; // [rsp+0h] [rbp-38h]  v1 = input[1];  v2 = *input;  v3 = input[2];  v4 = input[3];  v5 = input[4];  v6 = input[6];  v7 = input[5];  v8 = input[7];  v9 = input[8];  result = 0;  if ( -85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613 )  {    v11 = input[9];    if ( 30 * v11 + -70 * v9 + -122 * v6 + -81 * v7 + -66 * v5 + -115 * v4 + -41 * v3 + -86 * v1 - 15 * v2 - 30 * v8 == -54400      &amp;&amp; -103 * v11 + 120 * v8 + 108 * v7 + 48 * v4 + -89 * v3 + 78 * v1 - 41 * v2 + 31 * v5 - (v6 &lt;&lt; 6) - 120 * v9 == -10283      &amp;&amp; 71 * v6 + (v7 &lt;&lt; 7) + 99 * v5 + -111 * v3 + 85 * v1 + 79 * v2 - 30 * v4 - 119 * v8 + 48 * v9 - 16 * v11 == 22855      &amp;&amp; 5 * v11 + 23 * v9 + 122 * v8 + -19 * v6 + 99 * v7 + -117 * v5 + -69 * v3 + 22 * v1 - 98 * v2 + 10 * v4 == -2944      &amp;&amp; -54 * v11 + -23 * v8 + -82 * v3 + -85 * v2 + 124 * v1 - 11 * v4 - 8 * v5 - 60 * v7 + 95 * v6 + 100 * v9 == -2222      &amp;&amp; -83 * v11 + -111 * v7 + -57 * v2 + 41 * v1 + 73 * v3 - 18 * v4 + 26 * v5 + 16 * v6 + 77 * v8 - 63 * v9 == -13258      &amp;&amp; 81 * v11 + -48 * v9 + 66 * v8 + -104 * v6 + -121 * v7 + 95 * v5 + 85 * v4 + 60 * v3 + -85 * v2 + 80 * v1 == -1559      &amp;&amp; 101 * v11 + -85 * v9 + 7 * v6 + 117 * v7 + -83 * v5 + -101 * v4 + 90 * v3 + -28 * v1 + 18 * v2 - v8 == 6308 )    {      result = 99 * v11 + -28 * v9 + 5 * v8 + 93 * v6 + -18 * v7 + -127 * v5 + 6 * v4 + -9 * v3 + -93 * v1 + 58 * v2 == -1697;    }  }  return result;}</code></pre><p> 脚本</p> <pre class="language-none"><code class="language-none">from z3 import*s=Solver()v1=Int('v1')v2=Int('v2')v3=Int('v3')v4=Int('v4')v5=Int('v5')v6=Int('v6')v7=Int('v7')v8=Int('v8')v9=Int('v9')v11=Int('v11')s.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)s.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)s.add(-103 * v11 + 120 * v8 + 108 * v7 + 48 * v4 + -89 * v3 + 78 * v1 - 41 * v2 + 31 * v5 - (v6 *64) - 120 * v9 == -10283)s.add(71 * v6 + (v7 *128) + 99 * v5 + -111 * v3 + 85 * v1 + 79 * v2 - 30 * v4 - 119 * v8 + 48 * v9 - 16 * v11 == 22855)s.add(5 * v11 + 23 * v9 + 122 * v8 + -19 * v6 + 99 * v7 + -117 * v5 + -69 * v3 + 22 * v1 - 98 * v2 + 10 * v4 == -2944)s.add(-54 * v11 + -23 * v8 + -82 * v3 + -85 * v2 + 124 * v1 - 11 * v4 - 8 * v5 - 60 * v7 + 95 * v6 + 100 * v9 == -2222)s.add(-83 * v11 + -111 * v7 + -57 * v2 + 41 * v1 + 73 * v3 - 18 * v4 + 26 * v5 + 16 * v6 + 77 * v8 - 63 * v9 == -13258)s.add(81 * v11 + -48 * v9 + 66 * v8 + -104 * v6 + -121 * v7 + 95 * v5 + 85 * v4 + 60 * v3 + -85 * v2 + 80 * v1 == -1559)s.add(101 * v11 + -85 * v9 + 7 * v6 + 117 * v7 + -83 * v5 + -101 * v4 + 90 * v3 + -28 * v1 + 18 * v2 - v8 == 6308)s.add(99 * v11 + -28 * v9 + 5 * v8 + 93 * v6 + -18 * v7 + -127 * v5 + 6 * v4 + -9 * v3 + -93 * v1 + 58 * v2 == -1697)if s.check()==sat:    result=s.model()print(result)</code></pre><p> 这里的移位操作不能被识别，需要手动转换。</p><p> 其实这道题带了个简单的混淆</p> <pre class="language-none"><code class="language-none">unsigned __int64 __fastcall sub_C50(const char *a1, _BYTE *a2){  size_t v4; // rax  unsigned int v5; // edx  int v6; // edi  int v7; // ecx  __int64 v8; // r8  __int128 *v9; // rsi  unsigned int v10; // ecx  int v11; // eax  int v12; // edi  int v13; // edx  int v14; // eax  _BYTE *v15; // rsi  _BYTE *v16; // rcx  _BYTE *v17; // r8  int *i; // rax  unsigned __int64 result; // rax  __int128 v20[2]; // [rsp+0h] [rbp-48h] BYREF  __int64 v21; // [rsp+20h] [rbp-28h]  unsigned __int64 v22; // [rsp+28h] [rbp-20h]  v22 = __readfsqword(0x28u);  v20[0] = 0LL;  v21 = 0LL;  v20[1] = 0LL;  v4 = strlen(a1);  v5 = 0;  v6 = 9;  while ( v5 &lt; v4 )  {    v7 = a1[v5++];    v6 ^= v7;  }  if ( v6 )  {    v8 = 0LL;    v9 = v20;    while ( 1 )    {      v9 = (__int128 *)((char *)v9 + 4);      v10 = v8 + 1;      v11 = v6 / 10;      v12 = v6 % 10;      *((_DWORD *)v9 - 1) = v12;      LOBYTE(v13) = v12;      v6 = v11;      if ( !v11 )        break;      v8 = v10;    }    v14 = v8 - 1;    v15 = a2;    v16 = &amp;a2[v10];    v17 = &amp;a2[v8];    for ( i = (int *)v20 + v14; ; --i )    {      *v15 = v13 + 48;      if ( v17 == v15 )        break;      v13 = *i;      ++v15;    }  }  else  {    v16 = a2;  }  result = __readfsqword(0x28u) ^ v22;  *v16 = 0;  return result;}</code></pre><p> 这里面的函数没有对输入进行处理，所以不用管</p></li></ol><h1 id="修改二进制文件汇编指令"><a href="#修改二进制文件汇编指令" class="headerlink" title="修改二进制文件汇编指令"></a>修改二进制文件汇编指令</h1><p>1.题目——Overlong</p><p>运行程序，得到</p><pre class="language-none"><code class="language-none">I never broke the encoding：</code></pre><pre class="language-none"><code class="language-none">int __stdcall start(int a1, int a2, int a3, int a4){  CHAR Text[128]; // [esp+0h] [ebp-84h] BYREF  int v6; // [esp+80h] [ebp-4h]  v6 = sub_401160(Text, &amp;unk_402008, 28);  Text[v6] = 0;  MessageBoxA(0, Text, Caption, 0);  return 0;}</code></pre><p>这里只取出了TEXT的前28位，而程序运行后的输出长度正好是28，加上题目overlong提示和：结尾，猜测部分长度没显示</p><p>所以需要修改二进制文件汇编指令</p><pre class="language-none"><code class="language-none">.text:004011C0                 push    ebp.text:004011C1                 mov     ebp, esp.text:004011C3                 sub     esp, 84h.text:004011C9                 push    1Ch.text:004011CB                 push    offset unk_402008.text:004011D0                 lea     eax, [ebp+Text]</code></pre><p>1c对应28，所以需要将1c改大</p><p>1、ida修改–&gt; 点击菜单项“Edit”–“Patch program”–“Assemble” –&gt; 点击菜单项“Edit”–“Patch program”–“Apply patches to input file”，在弹出的对话框中点击OK按钮，则成功完成指令修改。</p><p>点击确认按钮时，可能会弹出无法写入对话框，只需去除该文件的只读属性，再次执行第三步即可。</p><p>2、OD修改–&gt;根据汇编指令定位–&gt;右键–&gt;二进制–&gt;编辑 ,其他的可以直接修改指令，但是这里修改之后后面的汇编代码全变了，虽然不知道为啥。</p><p>3、winhex修改–&gt;定位——先去ida的patch byte找到push 1c对应6A 1C 68 08 20 40 00 8D 85 7C FF FF FF 50 E8 84–&gt;去winhex修改1c，然后重新保存运行</p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>1、题目——Signin</p><pre class="language-none"><code class="language-none">__int64 __fastcall main(int a1, char **a2, char **a3){  char v4[16]; // [rsp+0h] [rbp-4A0h] BYREF  char v5[16]; // [rsp+10h] [rbp-490h] BYREF  char v6[16]; // [rsp+20h] [rbp-480h] BYREF  char v7[16]; // [rsp+30h] [rbp-470h] BYREF  char v8[112]; // [rsp+40h] [rbp-460h] BYREF  char v9[1000]; // [rsp+B0h] [rbp-3F0h] BYREF  unsigned __int64 v10; // [rsp+498h] [rbp-8h]  v10 = __readfsqword(0x28u);  puts("[sign in]");  printf("[input your flag]: ");  __isoc99_scanf("%99s", v8);  sub_96A(v8, v9);//加密函数直接linux远调就可以知道是转十六进制数；  __gmpz_init_set_str(v7, "ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35", 16LL);//十六进制  __gmpz_init_set_str(v6, v9, 16LL);  __gmpz_init_set_str(v4, "103461035900816914121390101299049044413950405173712170434161686539878160984549", 10LL);//十进制  __gmpz_init_set_str(v5, "65537", 10LL);  __gmpz_powm(v6, v6, v5, v4);  if ( (unsigned int)__gmpz_cmp(v6, v7) )    puts("GG!");  else    puts("TTTTTTTTTTql!");  return 0LL;}</code></pre><p>看到65537，加上查了__gmpz_powm()函数，也相当于__mpz_powm()函数，可以判断这是rsa加密</p><pre class="language-none"><code class="language-none">void mpz_powm (mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod) [Function]Set rop to base^exp mod mod.</code></pre><p> 其实就是计算 base 的 exp 次方，并对 mod 取模，最后将结果写入 rop 中 </p><p>剩下的就是解出p、q，然后写脚本了</p><pre class="language-none"><code class="language-none">C=M^E mod NC是密文，M是明文，E是公钥（E和 φ(N)互为质数），N是公共模数（质数 P 、Q相乘得到N），MOD就是模运算M=C^D mod N求D：E * D % φ(N) = 1    φ(N) = (P-1)(Q-1)   </code></pre><p>2、rsa</p><p>题目给出了公钥和flag.enc文件</p><pre class="language-none"><code class="language-none">(N,e)是公钥， (N, d)是私钥</code></pre><p>公钥和密钥生成</p><pre class="language-none"><code class="language-none">4.1 求N我们准备两个很小对质数，p ＝ 17q ＝ 19N ＝ p ＊ q ＝ 3234.2 求LL ＝ lcm（p－1， q－1）＝ lcm(16，18） ＝ 144144为16和18对最小公倍数4.3 求E求E必须要满足2个条件：1 &lt; E &lt; L ，gcd（E，L）=1即1 &lt; E &lt; 144，gcd（E，144） ＝ 1 #gcd，最大公因数E和144互为质数，5显然满足上述2个条件故E ＝ 5        此时公钥=(E，N）＝ （5，323）4.4 求D求D也必须满足2个条件：1 &lt; D &lt; L，E＊D mod L ＝ 1即1 &lt; D &lt; 144，5 ＊ D mod 144 ＝ 1显然当D＝ 29 时满足上述两个条件1 &lt; 29 &lt; 1445＊29 mod 144 ＝ 145 mod 144 ＝ 1此时私钥＝（D，N）＝（29，323）</code></pre><p>私钥和公钥都可以拿去解析</p><p>这里解析得到</p><pre class="language-none"><code class="language-none">e = 65537n=86934482296048119190666062003494800588905656017203025617216654058378322103517(n拿去分解)p = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463</code></pre><p>从文件读取公钥或者私钥</p><pre class="language-none"><code class="language-none">with open('private.pem', mode='rb') as privatefile:keydata = privatefile.read()#rb 是以二进制形式打开文件privkey = rsa.PrivateKey.load_pkcs1(keydata)</code></pre><pre class="language-none"><code class="language-none">import gmpy2 import rsa  e = 65537n = 86934482296048119190666062003494800588905656017203025617216654058378322103517p = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463phin = (q-1)*(p-1)d = gmpy2.invert(e, phin)key = rsa.PrivateKey(n, e, int(d), p, q)#生成私钥with open("D:\\new\\题目\\output\\flag.enc", "rb+") as f:    f = f.read()    print(rsa.decrypt(f, key))</code></pre><h1 id="Maze"><a href="#Maze" class="headerlink" title="Maze"></a>Maze</h1><p>Maze题一般都需要找到入口、出口还有移动方向</p><p>题目——unctf20201—easymaze</p><pre class="language-none"><code class="language-none">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 *v3; // rax  char *v4; // rdi  unsigned __int64 v5; // rbx  const char *v6; // rdx  int v7; // eax  int v8; // er9  int v9; // er8  int v10; // edx  char v11; // cl  int v12; // ecx  int v13; // ecx  __int64 *v14; // rax  sub_1400011A0(argc, argv, envp);  dword_140006790[0] = 1;#把鼠标放上去显示int型  dword_140006794 = 1;  dword_1400067B4 = 1;  dword_1400067CC = 1;  dword_1400067EC = 1;  dword_1400067F0 = 1;  dword_1400067D4 = 1;  dword_1400067D8 = 1;  dword_1400067F8 = 1;  dword_140006810 = 1;  dword_14000682C = 1;  dword_140006844 = 1;  dword_140006840 = 1;  dword_140006864 = 1;  dword_140006868 = 1;  dword_140006884 = 1;  dword_1400068A0 = 1;  dword_1400068BC = 1;  dword_1400068DC = 1;  dword_14000689C = 1;  v3 = sub_140001800(std::cout, (__int64)"Plz inpu7 the P4th :");  std::ostream::operator&lt;&lt;(v3, sub_1400019D0);  v4 = input;  v5 = -1i64;  sub_140001AA0(std::cin, -1i64, input);  do    ++v5;  while ( input[v5] );  if ( v5 &gt; 0x11 )  {    v6 = "to0 lon9!t0o long!";    goto LABEL_26;  }  if ( v5 &lt; 0x11 )  {    v6 = (const char *)&amp;unk_140003770;    goto LABEL_26;  }  v7 = dword_140006710;  v8 = 0;  v9 = dword_140006714;  v10 = dword_140006710;  do  {    v11 = *v4;    if ( *v4 == 'A' )      goto LABEL_21;    if ( v11 == 'W' )    {      ++v10;      v12 = v7 % 2;      ++v7;      goto LABEL_20;    }    if ( v11 == 'E' )    {      ++v10;      v13 = v7 % 2;      ++v7;LABEL_16:      dword_140006710 = v7;      if ( v13 )        goto LABEL_23;      goto LABEL_17;    }    if ( v11 != 'D' )    {      if ( v11 != 'X' )      {        if ( v11 != 'Z' )        {          v6 = "What the fuck did you give me?";          goto LABEL_26;        }        --v10;        v12 = v7 % 2;        --v7;LABEL_20:        dword_140006710 = v7;        if ( !v12 )          goto LABEL_23;LABEL_21:        --v9;        goto LABEL_22;      }      --v10;      v13 = v7 % 2;      --v7;      goto LABEL_16;    }LABEL_17:    ++v9;LABEL_22:    dword_140006714 = v9;LABEL_23:    ++v8;    ++v4;  }  while ( v8 &lt; v5 );  v6 = "Congratulations on this forced to get the right flag, you entered is the correct answer!";    if ( dword_140006790[7 * v7 + v9] != 1 )        v6 = "Try it again little unlucky!";LABEL_26:  v14 = sub_140001800(std::cout, (__int64)v6);  std::ostream::operator&lt;&lt;(v14, sub_1400019D0);  return 0;}</code></pre><p>动调就可以把AWEDXZ的移动弄出来</p><p>在ida里面dd表示四个字节，db表示一个字节</p><pre class="language-none"><code class="language-none">data:00007FF673BF6794 dword_7FF673BF6794 dd 0                 ; DATA XREF: main+27↑w.data:00007FF673BF6798 dd 0.data:00007FF673BF679C db    0.data:00007FF673BF679D db    0.data:00007FF673BF679E db    0.data:00007FF673BF679F db    0.data:00007FF673BF67A0 db    0.data:00007FF673BF67A1 db    0.data:00007FF673BF67A2 db    0.data:00007FF673BF67A3 db    0.data:00007FF673BF67A4 db    0.data:00007FF673BF67A5 db    0.data:00007FF673BF67A6 db    0.data:00007FF673BF67A7 db    0</code></pre><p>要对着db按D转换数据类型，全部转为int型</p><h1 id="base64变表"><a href="#base64变表" class="headerlink" title="base64变表"></a>base64变表</h1><p>1、base64变表实际上就是将base64编码表进行了修改</p><p>2、题目——nctf2021 shadowbringer</p><pre class="language-none"><code class="language-none">int __cdecl main(int argc, const char **argv, const char **envp){  char v4[16]; // [rsp+20h] [rbp-60h] BYREF  char v5[15]; // [rsp+30h] [rbp-50h] BYREF  char v6; // [rsp+3Fh] [rbp-41h] BYREF  char v7[16]; // [rsp+40h] [rbp-40h] BYREF  char v8[16]; // [rsp+50h] [rbp-30h] BYREF  char v9[16]; // [rsp+60h] [rbp-20h] BYREF  char v10[32]; // [rsp+70h] [rbp-10h] BYREF  _main();  youknowwhat();  std::string::string((std::string *)v5);  std::allocator&lt;char&gt;::allocator(&amp;v6);  std::string::string(v4, "U&gt;F2UsQXN`5sXMELT=:7M_2&lt;X]^1ThaWF0=KM?9IUhAsTM5:T==_Ns&amp;&lt;Vhb!", &amp;v6);  std::allocator&lt;char&gt;::~allocator(&amp;v6);  std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(printf_0, "Welcome.Please input your flag:\n");  std::operator&gt;&gt;&lt;char&gt;(scanf, (std::string *)v5);  std::string::string((std::string *)v8, (const std::string *)v5);    Emet(v7, v8);    std::string::operator=(v5, v7);  std::string::~string((std::string *)v7);  std::string::~string((std::string *)v8);  std::string::string((std::string *)v10, (const std::string *)v5);    Selch(v9, v10);    std::string::operator=(v5, v9);                 std::string::~string((std::string *)v9);  std::string::~string((std::string *)v10);  if ( (unsigned __int8)std::operator==&lt;char&gt;(v5, v4) )    std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(printf_0, "Right.");  else    std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(printf_0, "Wrong.");  std::string::~string((std::string *)v4);  std::string::~string((std::string *)v5);  return 0;}</code></pre><pre class="language-none"><code class="language-none">std::string *__fastcall Emet(std::string *a1, std::string *a2){  int i; // ebx  char *v3; // rax  unsigned __int64 v4; // rax  int j; // ebx  unsigned int v6; // eax  char *v7; // rax  unsigned __int64 v9; // [rsp+20h] [rbp-90h] BYREF  char v10; // [rsp+2Eh] [rbp-82h] BYREF  char v11; // [rsp+2Fh] [rbp-81h] BYREF  char v12[16]; // [rsp+30h] [rbp-80h] BYREF  char v13[16]; // [rsp+40h] [rbp-70h] BYREF  char v14[16]; // [rsp+50h] [rbp-60h] BYREF  char v15[16]; // [rsp+60h] [rbp-50h] BYREF  char v16[16]; // [rsp+70h] [rbp-40h] BYREF  char v17[16]; // [rsp+80h] [rbp-30h] BYREF  char v18[16]; // [rsp+90h] [rbp-20h] BYREF  char v19[16]; // [rsp+A0h] [rbp-10h] BYREF  std::allocator&lt;char&gt;::allocator(&amp;v10);  std::string::string(&amp;v9, &amp;unk_48A000, &amp;v10);  std::allocator&lt;char&gt;::~allocator(&amp;v10);  std::allocator&lt;char&gt;::allocator(&amp;v11);  std::string::string(a1, &amp;unk_48A000, &amp;v11);  std::allocator&lt;char&gt;::~allocator(&amp;v11);  for ( i = 0; i &lt; (unsigned __int64)std::string::size(a2); ++i )  {    v3 = (char *)std::string::operator[](a2, i);    std::bitset&lt;8ull&gt;::bitset(v14, (unsigned int)*v3);    std::bitset&lt;8ull&gt;::to_string(v13, v14);    std::operator+&lt;char&gt;(v12, &amp;v9, v13);    std::string::operator=(&amp;v9, v12);    std::string::~string((std::string *)v12);    std::string::~string((std::string *)v13);  }  while ( 1 )  {    v4 = std::string::size((std::string *)&amp;v9);    if ( v4 == 6 * (v4 / 6) )      break;    std::operator+&lt;char&gt;(v15, &amp;v9, 48i64);    std::string::operator=(&amp;v9, v15);    std::string::~string((std::string *)v15);  }  for ( j = 0; j &lt; (unsigned __int64)std::string::size((std::string *)&amp;v9); j += 6 )  {    std::string::substr((std::string *)v18, (unsigned __int64)&amp;v9, j);    std::bitset&lt;6ull&gt;::bitset&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(v17, v18, 0i64);    v6 = std::bitset&lt;6ull&gt;::to_ulong(v17);    v7 = (char *)std::string::operator[](&amp;hisoralce, v6);    std::operator+&lt;char&gt;(v16, a1, (unsigned int)*v7);    std::string::operator=(a1, v16);    std::string::~string((std::string *)v16);    std::string::~string((std::string *)v18);  }  while ( (std::string::size(a1) &amp; 3) != 0 )  {    std::operator+&lt;char&gt;(v19, a1, 33i64);    std::string::operator=(a1, v19);    std::string::~string((std::string *)v19);  }  std::string::~string((std::string *)&amp;v9);  return a1;}</code></pre><p>这里的j+=6，像是base64，而&amp;hisorale是指针</p><pre class="language-none"><code class="language-none">bss:00000000004AA030 hisoralce db  28h ; (                   ; DATA XREF: youknowwhat(void)+2A↑o.bss:00000000004AA030                                         ; youknowwhat(void)+40↑o ....bss:00000000004AA031 db  3Dh ; =.bss:00000000004AA032 db 0BBh.bss:00000000004AA033 db    0.bss:00000000004AA034 db    0.bss:00000000004AA035 db    0.bss:00000000004AA036 db    0.bss:00000000004AA037 db    0</code></pre><p>需要对着db按d转换类型，才能看到该地址存储的内容</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
