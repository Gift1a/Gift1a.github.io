<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tea、XTea、XXTea原理和实现</title>
      <link href="/2022/02/07/Tea%E3%80%81XTea%E3%80%81XXTea%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/02/07/Tea%E3%80%81XTea%E3%80%81XXTea%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Tea"><a href="#Tea" class="headerlink" title="Tea"></a>Tea</h1><h1 id="XTea"><a href="#XTea" class="headerlink" title="XTea"></a>XTea</h1><h1 id="XXTea"><a href="#XXTea" class="headerlink" title="XXTea"></a>XXTea</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RC4原理和实现</title>
      <link href="/2022/02/06/RC4%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/02/06/RC4%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>RC4属于对称密码算法中的流密码加密算法</p><p>密钥长度可变，面向字节操作</p><p>以一个足够大的S表为基础，对表进行非线性变换，产生密钥流</p><h1 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h1><h2 id="初始化S表"><a href="#初始化S表" class="headerlink" title="初始化S表"></a>初始化S表</h2><p>1、对S表进行先行填充，一般为256字节，且为unsigned类型</p><p>2、用种子密钥填充另一个256字节的K表</p><p>如果种子密钥长度不为256，将循环使用种子密钥对K表进行填充</p><p>3、用 K表对S表进行初始置换</p><h3 id="样例展示"><a href="#样例展示" class="headerlink" title="样例展示"></a>样例展示</h3><p>这里我们假设S表和K表都是7个字节的，密钥为345，填充结果如下</p><p><img src="/2022/02/06/RC4%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/1644168199163.png"></p><p>使用K表对S表进行置换</p><pre class="language-c" data-language="c"><code class="language-c">int j = 0;for (int i = 0; i &lt; 7; ++i){j = (j + S[i] + K[i]) % 7;Swap(S[i], S[j]);}</code></pre><p>得到被置换后的S表</p><p><img src="/2022/02/06/RC4%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/1644168394862.png"></p><h2 id="生成密钥流"><a href="#生成密钥流" class="headerlink" title="生成密钥流"></a>生成密钥流</h2><p>作用：为每个待价密的字节生成一个伪随机数，用来异或</p><p>注：S表完成初始化之后，种子密钥将不会再被使用</p><p>使用置换后的S表生成密钥流</p><pre class="language-c" data-language="c"><code class="language-c">int i, j = 0;for (int k = 0; k &lt; strlen(raw); ++k){i = (i + 1) % 7;j = (j + S[i]) % 7;Swap(S[i], S[j]);int t = (S[i] + S[j]) % 7;K[k] = S[t];}</code></pre><h1 id="加密过程-1"><a href="#加密过程-1" class="headerlink" title="加密过程"></a>加密过程</h1><p>密钥流和明文进行异或得到密文</p><h1 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h1><pre class="language-c" data-language="c"><code class="language-c">#include&lt;stdio.h&gt;#include &lt;string.h&gt;void Rc4_init(unsigned char* S, unsigned char*K,unsigned char* key, unsigned long len){unsigned char  tmp = 0;for (int i = 0; i &lt; 256; ++i){S[i] = i;K[i] = key[i % len];}int j = 0;for (int i = 0; i &lt; 256; ++i){j = (j + S[i] + K[i]) % 256;tmp = S[i];S[i] = S[j];S[j] = tmp;}return;}void Rc4_encrypt(unsigned char* S, unsigned  char* flag,int len){int i = 0, j = 0,t = 0 ;unsigned char key_liu[len] = { 0 };unsigned char tmp = 0;for (unsigned long k = 0; k &lt; len; ++k){i = (i + 1) % 256;j = (j + S[i]) % 256;tmp = S[i];S[i] = S[j];S[j] = tmp;t = (S[i] + S[j]) % 256;key_liu[k] = S[t];}for (int i = 0; i &lt; len; ++i){flag[i] ^= key_liu[i];}}int main(){unsigned char S[256] = { 0 };unsigned char K[256] = { 0 };char flag[512] = { 0xB6, 0x94, 0xFA, 0x8F, 0x3D, 0x5F, 0xB2, 0xE0,0xEA, 0x0F, 0xD2, 0x66, 0x98, 0x6C, 0x9D, 0xE7,0x1B, 0x08, 0x40, 0x71, 0xC5, 0xBE, 0x6F, 0x6D,0x7C, 0x7B, 0x09, 0x8D, 0xA8, 0xBD, 0xF3, 0xF6};char key[] = "w0wy0ugot1t";unsigned long Len = strlen(flag);Rc4_init(S, K,(unsigned char*)key, strlen(key));Rc4_encrypt(S, (unsigned char*)flag, Len);printf("%s", flag);return 0;}</code></pre><p>可以不保存密钥流，直接进行异或，逆向的时候我们可以动调得到密钥流，再与密文进行异或就可以得到明文了</p><pre class="language-c" data-language="c"><code class="language-c">void Rc4_encrypt(unsigned char* S, unsigned  char* flag,char*flag1){int len = strlen(flag1);int i = 0, j = 0,t = 0 ;unsigned char tmp = 0;for (unsigned long k = 0; k &lt; len; ++k){i = (i + 1) % 256;j = (j + S[i]) % 256;tmp = S[i];S[i] = S[j];S[j] = tmp;t = (S[i] + S[j]) % 256;flag[k] ^= S[t];}}</code></pre><p>分别看一下加密过程的逆向代码</p><p>直接异或，动调根据存储的寄存器进行提取</p><pre class="language-c" data-language="c"><code class="language-c">__int64 __fastcall Rc4_encrypt(unsigned __int8 *a1, unsigned __int8 *a2, char *a3){  unsigned int v3; // eax  unsigned __int8 v4; // ST2B_1  __int64 result; // rax  unsigned int v6; // [rsp+30h] [rbp-10h]  unsigned int i; // [rsp+34h] [rbp-Ch]  int v8; // [rsp+38h] [rbp-8h]  signed int v9; // [rsp+3Ch] [rbp-4h]  unsigned __int8 *v10; // [rsp+50h] [rbp+10h]  unsigned __int8 *v11; // [rsp+58h] [rbp+18h]  v10 = a1;  v11 = a2;  v6 = strlen(a3);  v9 = 0;  v8 = 0;  for ( i = 0; ; ++i )  {    result = v6;    if ( v6 &lt;= i )      break;    v9 = (unsigned __int8)(((unsigned int)((v9 + 1) &gt;&gt; 31) &gt;&gt; 24) + v9 + 1) - ((unsigned int)((v9 + 1) &gt;&gt; 31) &gt;&gt; 24);    v3 = (unsigned int)((v8 + v10[v9]) &gt;&gt; 31) &gt;&gt; 24;    v8 = (unsigned __int8)(v3 + v8 + v10[v9]) - v3;    v4 = v10[v9];    v10[v9] = v10[v8];    v10[v8] = v4;    v11[i] ^= v10[(unsigned __int8)(v10[v9] + v10[v8])];  }  return result;}</code></pre><p>先保存再异或</p><pre class="language-c" data-language="c"><code class="language-c">__int64 __fastcall Rc4_encrypt(unsigned __int8 *a1, unsigned __int8 *a2, signed int a3){  void *v3; // rsp  char *v4; // rax  signed __int64 i; // rdx  unsigned int v6; // eax  __int64 result; // rax  __int64 v8; // [rsp+0h] [rbp-30h]  __int64 *v9; // [rsp+8h] [rbp-28h]  __int64 v10; // [rsp+10h] [rbp-20h]  int v11; // [rsp+1Ch] [rbp-14h]  unsigned int k; // [rsp+20h] [rbp-10h]  unsigned int j; // [rsp+24h] [rbp-Ch]  unsigned int v14; // [rsp+28h] [rbp-8h]  unsigned int v15; // [rsp+2Ch] [rbp-4h]  unsigned __int8 *v16; // [rsp+58h] [rbp+28h]  v16 = a2;  v15 = 0;  v14 = 0;  v11 = 0;  v10 = a3 - 1i64;  v3 = alloca(16 * ((unsigned __int64)(a3 + 15i64) &gt;&gt; 4));  v9 = &amp;v8;  LOBYTE(v8) = 0;  v4 = (char *)&amp;v8 + 1;  for ( i = a3 - 2i64; i != -1; --i )    *v4++ = 0;  HIBYTE(v8) = 0;  for ( j = 0; a3 &gt; j; ++j )  {    v15 = (unsigned __int8)(((unsigned int)((signed int)(v15 + 1) &gt;&gt; 31) &gt;&gt; 24) + v15 + 1)        - ((unsigned int)((signed int)(v15 + 1) &gt;&gt; 31) &gt;&gt; 24);    v6 = (unsigned int)((signed int)(v14 + a1[v15]) &gt;&gt; 31) &gt;&gt; 24;    v14 = (unsigned __int8)(v6 + v14 + a1[v15]) - v6;    HIBYTE(v8) = a1[v15];    a1[v15] = a1[v14];    a1[v14] = HIBYTE(v8);    v11 = (unsigned __int8)(a1[v15] + a1[v14]);    *((_BYTE *)v9 + j) = a1[v11];  }  for ( k = 0; ; ++k )  {    result = k;    if ( (signed int)k &gt;= a3 )      break;    v16[k] ^= *((_BYTE *)v9 + (signed int)k);  }  return result;}</code></pre><p>可以看到密钥流存储在v9，动调之后可以直接提取</p><p>Vs2022生成的exe文件反编译</p><pre class="language-c" data-language="c"><code class="language-c">__int64 __fastcall sub_140015E30(__int64 a1, __int64 a2, char *a3){  __int64 result; // rax  __int64 v4; // kr00_8  unsigned __int8 v5; // dl  char v6; // STA4_1  int v7; // edx  unsigned int v8; // [rsp+24h] [rbp+4h]  int v9; // [rsp+44h] [rbp+24h]  int v10; // [rsp+64h] [rbp+44h]  unsigned int i; // [rsp+C4h] [rbp+A4h]  __int64 v12; // [rsp+1C0h] [rbp+1A0h]  __int64 v13; // [rsp+1C8h] [rbp+1A8h]  const char *Str; // [rsp+1D0h] [rbp+1B0h]  Str = a3;  v13 = a2;  v12 = a1;  sub_140011361(&amp;unk_14002200E);  v8 = j_strlen(Str);  v9 = 0;  v10 = 0;  for ( i = 0; ; ++i )  {    result = v8;    if ( i &gt;= v8 )      break;    v4 = v9 + 1;    v9 = (BYTE4(v4) + v9 + 1) - BYTE4(v4);    v5 = (*(v12 + v9) + v10) &gt;&gt; 31;    v10 = (v5 + *(v12 + v9) + v10) - v5;    v6 = *(v12 + v9);    *(v12 + v9) = *(v12 + v10);    *(v12 + v10) = v6;    v7 = (*(v12 + v10) + *(v12 + v9)) &gt;&gt; 31;    *(v13 + i) ^= *(v12 + (v7 + *(v12 + v10) + *(v12 + v9)) - v7);  }  return result;}</code></pre><p>看着跟别的不一样，留一下</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>base64实现及细节剖析</title>
      <link href="/2022/02/06/base64%E5%AE%9E%E7%8E%B0%E5%8F%8A%E7%BB%86%E8%8A%82%E5%89%96%E6%9E%90/"/>
      <url>/2022/02/06/base64%E5%AE%9E%E7%8E%B0%E5%8F%8A%E7%BB%86%E8%8A%82%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><pre class="language-c" data-language="c"><code class="language-c">#include&lt;stdio.h&gt;#include &lt;string.h&gt;char base64_table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";void base64_encode(char raw[], char encode[]){int code_len = strlen(raw);int final_len = 0;if (code_len % 3){final_len = (code_len / 3 + 1) * 4;}elsefinal_len = (code_len / 3) * 4;int i = 0, i_ = 0;for (; i &lt; code_len; i += 3, i_ += 4){encode[i_] = base64_table[raw[i] &gt;&gt; 2];encode[i_ + 1] = base64_table[((raw[i] &amp; 0x03) &lt;&lt; 4) | ((raw[i + 1] &amp; 0xf0) &gt;&gt; 4)];encode[i_ + 2] = base64_table[((raw[i + 1] &amp; 0x0f) &lt;&lt; 2) | ((raw[i + 2] &amp; 0xc0) &gt;&gt; 6)];encode[i_ + 3] = base64_table[raw[i + 2] &amp; 0x3f];}if (code_len % 3 == 1){encode[i_ - 1] = '=';encode[i_ - 2] = '=';}else if (code_len % 3 == 2){encode[i_ - 1] = '=';}return;}int Findindex(char c){for (int i = 0; i &lt; strlen(base64_table); ++i){if (c == base64_table[i])return i;}}void base64_decode(char* encode, char* decode){int decode_len=0;int encode_len = strlen(encode);if (strstr(encode, "=="))decode_len = (encode_len / 4) * 3 - 2;else if (strstr(encode, "="))decode_len = (encode_len / 4) * 3 - 1;elsedecode_len = (encode_len / 4) * 3;int i = 0, i_ = 0;for (; i &lt; encode_len; i_ += 4, i += 3){decode[i] = (Findindex(encode[i_]) &lt;&lt; 2) | (Findindex(encode[i_ + 1]) &amp; 0x30) &gt;&gt; 4;decode[i + 1] = ((Findindex(encode[i_ + 1]) &amp; 0xf) &lt;&lt; 4) | ((Findindex(encode[i_ + 2]) &amp; 0x3c) &gt;&gt; 2);decode[i + 2] = ((Findindex(encode[i_ + 2]) &amp; 0x3) &lt;&lt; 6) | ((Findindex(encode[i_ + 3])));}decode[decode_len] = 0;return;}int main(){char raw[] = "hgame{123456}";char encode[100] = { 0 };char decode[100] = { 0 };base64_encode(raw, encode);printf("%s", encode);base64_decode(encode, decode);printf("\n%s", decode);}</code></pre><h1 id="细节剖析"><a href="#细节剖析" class="headerlink" title="细节剖析"></a>细节剖析</h1><h2 id="编码部分"><a href="#编码部分" class="headerlink" title="编码部分"></a>编码部分</h2><h3 id="记录长度"><a href="#记录长度" class="headerlink" title="记录长度"></a>记录长度</h3><p>首先要先计算长度，base64就是将三个字节扩展为四个字节，所以要分成有余数和整除两种情况</p><pre class="language-c" data-language="c"><code class="language-c">int code_len = strlen(raw);int final_len = 0;if (code_len % 3){final_len = (code_len / 3 + 1) * 4;}elsefinal_len = (code_len / 3) * 4;</code></pre><h3 id="编码部分-1"><a href="#编码部分-1" class="headerlink" title="编码部分"></a>编码部分</h3><p>首先先介绍一下两个工具，&amp;和|，和一些数据做&amp;运算可以取到我们想要的位，而|运算可以将两部分结合在一起</p><p>编码后的索引最多为六位，原先的数据可以是八位的</p><h4 id="encode-i"><a href="#encode-i" class="headerlink" title="encode[i]"></a>encode[i]</h4><p>这个其实是最好实现的，因为只需要取到前六位，所以直接&gt;&gt;2就可以实现</p><pre class="language-c" data-language="c"><code class="language-c">encode[i_] = base64_table[raw[i] &gt;&gt; 2];</code></pre><h4 id="encode-i-1"><a href="#encode-i-1" class="headerlink" title="encode[i+1]"></a>encode[i+1]</h4><p>先明确我们的需求，从第一个数据获取最后的两位与第二个数据获取的前四位结合。需要用到&amp;，这里的结合就需要用到|。</p><p>首先要保证我们取到的是两位的，需要&amp;0x03</p><table><thead><tr><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>1</th><th>1</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>因为只有最后两位是1，根据按位&amp;，当有一个是0时运算后结果必定为0，所以就可以取到最后两位</p><p>下一步是移到正确的位置，需要用到位移运算符</p><p>这里第一个数的最后两位编码后是放在前面两位的位置，所以需要&lt;&lt;4</p><p>接下来取剩余的四位</p><p>剩余的四位来自第二个数的前四位</p><p>可以先&amp;0xf0使得后四位都为0，当然也可以不用，直接&gt;&gt;4</p><p>最后使用|结合起来</p><table><thead><tr><th>0</th><th>0</th><th>0</th><th>1</th><th>1</th><th>0</th><th>0</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td>与</td><td>运</td><td>算</td><td></td></tr><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><pre class="language-c" data-language="c"><code class="language-c">encode[i_ + 1] = base64_table[((raw[i] &amp; 0x03) &lt;&lt; 4) | ((raw[i + 1]) &gt;&gt; 4)];</code></pre><h4 id="encode-i-2"><a href="#encode-i-2" class="headerlink" title="encode[i+2]"></a>encode[i+2]</h4><p>要用到第二个数据的后四位和第三个数据的前两位</p><p>同理，要保留第二个数据的后四位并且去除前四位，就需要&amp;0xf，移到正确的位置&lt;&lt;2，剩余两位留给第三个数据的前两位</p><p>要取到第三个数据的前两位</p><p>可以直接&gt;&gt;6保证前两位移动到最后的两位，也可以先用&amp;0xc0清除后四位，因为是00110000，最后结合起来就可以了</p><pre class="language-c" data-language="c"><code class="language-c">encode[i_ + 2] = base64_table[((raw[i + 1] &amp; 0x0f) &lt;&lt; 2) | ((raw[i + 2] ) &gt;&gt; 6)];</code></pre><h4 id="encode-i-3"><a href="#encode-i-3" class="headerlink" title="encode[i+3]"></a>encode[i+3]</h4><p>只需要取到第三个数据的后六位就可以了</p><p>直接&amp;0x3f，因为0x3f的二进制是00111111</p><pre class="language-c" data-language="c"><code class="language-c">encode[i_ + 3] = base64_table[raw[i + 2] &amp; 0x3f];</code></pre><h4 id="填加"><a href="#填加" class="headerlink" title="填加="></a>填加=</h4><p>如果编码前的数据长度%3不等于0，需要使用=填充</p><p>如果多出一位的话，根据经过上述过程会变成两位，所以最后两位需要用到=来填充</p><p>多出两位，经过上述过程变成三位，所以只需填充最后一位为=</p><pre class="language-c" data-language="c"><code class="language-c">if (code_len % 3 == 1){encode[i_ - 1] = '=';encode[i_ - 2] = '=';}else if (code_len % 3 == 2){encode[i_ - 1] = '=';}</code></pre><h3 id="解码部分"><a href="#解码部分" class="headerlink" title="解码部分"></a>解码部分</h3><p>六位还原为八位</p><h4 id="去除"><a href="#去除" class="headerlink" title="去除="></a>去除=</h4><p>先计算解码后的长度，每四个对应三个，最后减去=的长度</p><pre class="language-c" data-language="c"><code class="language-c">int decode_len=0;int encode_len = strlen(encode);if (strstr(encode, "=="))decode_len = (encode_len / 4) * 3 - 2;else if (strstr(encode, "="))decode_len = (encode_len / 4) * 3 - 1;elsedecode_len = (encode_len / 4) * 3;</code></pre><h4 id="decode-i"><a href="#decode-i" class="headerlink" title="decode[i]"></a>decode[i]</h4><p>其实和上面过程正好相反，取第一个编码数据的后六位（因为前两位是填充的0）和第二个编码数据的前两位，在此之前需要先去除前两位填充的0，所以要&amp;0x30，根据上面的过程，我们需要的是00110000，正好是0x30</p><p>再用|结合</p><pre class="language-c" data-language="c"><code class="language-c">decode[i] = (Findindex(encode[i_]) &lt;&lt; 2) | (Findindex(encode[i_ + 1]) &amp; 0x30) &gt;&gt; 4;</code></pre><h4 id="decode-i-1"><a href="#decode-i-1" class="headerlink" title="decode[i+1]"></a>decode[i+1]</h4><p>需要第二个编码数据的后四位和第三个编码数据的前四位，也是需要先去除填充的0</p><p>所以第二个数据&amp;0xf保证取到后四位，&lt;&lt;4移到前四位</p><p>第三个数据&amp;0x3c（00111100）进行去除填充的前两位0以及取到需要的那四位，再&gt;&gt;2，最后使用|结合</p><pre class="language-c" data-language="c"><code class="language-c">decode[i + 1] = ((Findindex(encode[i_ + 1]) &amp; 0xf) &lt;&lt; 4) | ((Findindex(encode[i_ + 2]) &amp; 0x3c) &gt;&gt; 2);</code></pre><h4 id="decode-i-2"><a href="#decode-i-2" class="headerlink" title="decode[i+2]"></a>decode[i+2]</h4><p>第三个编码数据的后两位和第四个编码数据的那六位</p><p>和上述过程类似，就不赘述了</p><h4 id="字符数组结束"><a href="#字符数组结束" class="headerlink" title="字符数组结束"></a>字符数组结束</h4><p>最后记得填加字符数组结束符</p><pre class="language-c" data-language="c"><code class="language-c">decode[decode_len] = 0;</code></pre><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>base64还可以魔改，进行变表操作或者在编码过程中参杂异或（Dasctf2022）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ELF文件手脱upx变形壳</title>
      <link href="/2022/02/03/ELF%E6%96%87%E4%BB%B6%E6%89%8B%E8%84%B1upx%E5%8F%98%E5%BD%A2%E5%A3%B3/"/>
      <url>/2022/02/03/ELF%E6%96%87%E4%BB%B6%E6%89%8B%E8%84%B1upx%E5%8F%98%E5%BD%A2%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="题目-hgame2022-week2-upx-magic1"><a href="#题目-hgame2022-week2-upx-magic1" class="headerlink" title="题目-hgame2022-week2-upx magic1"></a>题目-hgame2022-week2-upx magic1</h1><p>发现命令行脱壳没用，只能手脱，elf文件没办法使用esp定律，ida手脱</p><p>进入ida</p><p><img src="/2022/02/03/ELF%E6%96%87%E4%BB%B6%E6%89%8B%E8%84%B1upx%E5%8F%98%E5%BD%A2%E5%A3%B3/1643878891388.png"></p><p>在第一个call下断点，进行动态调试</p><p>F7单步进入</p><p><img src="/2022/02/03/ELF%E6%96%87%E4%BB%B6%E6%89%8B%E8%84%B1upx%E5%8F%98%E5%BD%A2%E5%A3%B3/1643879064585.png"></p><p>到了第二个call再次F7进入</p><p><img src="/2022/02/03/ELF%E6%96%87%E4%BB%B6%E6%89%8B%E8%84%B1upx%E5%8F%98%E5%BD%A2%E5%A3%B3/1643879092434.png"></p><p>一路f8</p><p>retn后到</p><p><img src="/2022/02/03/ELF%E6%96%87%E4%BB%B6%E6%89%8B%E8%84%B1upx%E5%8F%98%E5%BD%A2%E5%A3%B3/1643879119459.png"></p><p>F7进入</p><p><img src="/2022/02/03/ELF%E6%96%87%E4%BB%B6%E6%89%8B%E8%84%B1upx%E5%8F%98%E5%BD%A2%E5%A3%B3/1643879160619.png"></p><p>有三个向上的跳转</p><p>在第三个跳转之后F4</p><p>一直F8到达程序真正的入口点</p><p><img src="/2022/02/03/ELF%E6%96%87%E4%BB%B6%E6%89%8B%E8%84%B1upx%E5%8F%98%E5%BD%A2%E5%A3%B3/1643879196863.png"></p><p>此时需要dumpfile</p><p>ALT+F7运行脚本，脚本需要修改后缀为idc</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;idc.idc&gt;#define PT_LOAD              1#define PT_DYNAMIC           2static main(void){         auto ImageBase,StartImg,EndImg;         auto e_phoff;         auto e_phnum,p_offset;         auto i,dumpfile;         ImageBase=0x400000;         StartImg=0x400000;         EndImg=0x0;         if (Dword(ImageBase)==0x7f454c46 || Dword(ImageBase)==0x464c457f )  {    if(dumpfile=fopen("D:\\dumpfile2","wb"))//这路可以更改路径    {      e_phoff=ImageBase+Qword(ImageBase+0x20);      Message("e_phoff = 0x%x\n", e_phoff);      e_phnum=Word(ImageBase+0x38);      Message("e_phnum = 0x%x\n", e_phnum);      for(i=0;i&lt;e_phnum;i++)      {         if (Dword(e_phoff)==PT_LOAD || Dword(e_phoff)==PT_DYNAMIC)                         {                                  p_offset=Qword(e_phoff+0x8);                                 StartImg=Qword(e_phoff+0x10);                                 EndImg=StartImg+Qword(e_phoff+0x28);                                 Message("start = 0x%x, end = 0x%x, offset = 0x%x\n", StartImg, EndImg, p_offset);                                 dump(dumpfile,StartImg,EndImg,p_offset);                                 Message("dump segment %d ok.\n",i);                         }             e_phoff=e_phoff+0x38;      }      fseek(dumpfile,0x3c,0);      fputc(0x00,dumpfile);      fputc(0x00,dumpfile);      fputc(0x00,dumpfile);      fputc(0x00,dumpfile);      fseek(dumpfile,0x28,0);      fputc(0x00,dumpfile);      fputc(0x00,dumpfile);      fputc(0x00,dumpfile);      fputc(0x00,dumpfile);      fputc(0x00,dumpfile);      fputc(0x00,dumpfile);      fputc(0x00,dumpfile);      fputc(0x00,dumpfile);      fclose(dumpfile);        }else Message("dump err."); }}static dump(dumpfile,startimg,endimg,offset) {        auto i;        auto size;        size=endimg-startimg;        fseek(dumpfile,offset,0);        for ( i=0; i &lt; size; i=i+1 )         {        fputc(Byte(startimg+i),dumpfile);        }}</code></pre><p>得到dumpfile2，拖进ida得到正常的代码</p><p><img src="/2022/02/03/ELF%E6%96%87%E4%BB%B6%E6%89%8B%E8%84%B1upx%E5%8F%98%E5%BD%A2%E5%A3%B3/1643879324566.png"></p><h3 id="爆破脚本"><a href="#爆破脚本" class="headerlink" title="爆破脚本"></a>爆破脚本</h3><p>这里要按位与上0xffff，因为这里最后只赋值了最后十六位，所以需要使用&amp;0xffff来限制位数，保证取到最后的十六位</p><p>有时候还存在左移溢出的问题：</p><p><a href="https://blog.csdn.net/u013658041/article/details/78116449">https://blog.csdn.net/u013658041/article/details/78116449</a></p><p><img src="/2022/02/03/ELF%E6%96%87%E4%BB%B6%E6%89%8B%E8%84%B1upx%E5%8F%98%E5%BD%A2%E5%A3%B3/1644069404698.png"></p><pre class="language-c" data-language="c"><code class="language-c">#include&lt;stdio.h&gt; #include &lt;string.h&gt;#include &lt;stdlib.h&gt;int main(){int s[]={0x8d68,0x9d49,0x2a12,0xab1a,0xcbdc,0xb92b,0x2e32,0x9f59,0xddcd,0x9d49,0xa90a,0xe70,0xf5cf,0x5ed5,0x3c03,0x7c87,0x2672,0xab1a,0xa50,0x5af5,0xff9f,0x9f59,0xbd0b,0x58e5,0x3823,0xbf1b,0x78a7,0xab1a,0x48c4,0xa90a,0x2c22,0x9f59,0x5cc5,0x5ed5,0x78a7,0x2672,0x5695};for(int i=0;i&lt;40;++i){for(int j=32;j&lt;=127;++j){int temp=(j&lt;&lt;8)&amp;0xffff;for(int  k=0;k&lt;8;++k){if((temp&amp;0x8000)!=0){temp=((2*temp)^0x1021)&amp;0xffff;}elsetemp=(2*temp)&amp;0xffff;}if(temp==s[i]){printf("%c",j);}}}return 0;}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hook</title>
      <link href="/2022/02/03/Hook/"/>
      <url>/2022/02/03/Hook/</url>
      
        <content type="html"><![CDATA[<h1 id="题目-BUUCTF-easystrcmp"><a href="#题目-BUUCTF-easystrcmp" class="headerlink" title="题目-BUUCTF-easystrcmp"></a>题目-BUUCTF-easystrcmp</h1><p>进入主函数</p><p><img src="/2022/02/03/Hook/1643884712406.png"></p><p>看似是一个简单的比较，但是输入之后发现并不对</p><p>应该是做了什么处理，动态调试</p><p>点进strcmp函数</p><p><img src="/2022/02/03/Hook/1643884961802.png"></p><p>发现跳转到了加密函数</p><p>原理分析</p><p>因为存在init段，去查看函数</p><p><img src="/2022/02/03/Hook/1643885017644.png"></p><p>这样可以查看函数列表进行跳转</p><p><img src="/2022/02/03/Hook/1643885047181.png"></p><p>进入off函数</p><p><img src="/2022/02/03/Hook/1643885073169.png"></p><p>第一个函数点进去没发现什么，第二个函数点进去</p><p><img src="/2022/02/03/Hook/1643885101701.png"></p><p>可以看到先把strcmp函数的地址赋值给qword_201090</p><p>然后把sub_6EA函数赋值给off-102028,点进去</p><p><img src="/2022/02/03/Hook/1643885199097.png"></p><p>发现正好是strcmp的地址，所以真正运行起来，函数会跳转到sub_6EA函数中，而不是strcmp函数，这样就实现了一个简单的hook</p><p>脚本</p><pre class="language-c" data-language="c"><code class="language-c">#include&lt;stdio.h&gt;#include &lt;string.h&gt;int main(){char flag[]="********CENSORED********";char s[]={0x42, 0x09,   0x4A, 0x49, 0x35, 0x43, 0x0A, 0x41, 0xF0, 0x19, 0xE6, 0x0B,   0xF5, 0xF2, 0x0E, 0x0B, 0x2B, 0x28, 0x35, 0x4A, 0x06, 0x3A,   0x0A, 0x4F};  for(int i=0;i&lt;strlen(flag);++i)  {  flag[i]+=s[i];  }  printf("%s",flag);return 0; } </code></pre><p><a href="https://www.cnblogs.com/iBinary/p/7599789.html%E5%85%B7%E4%BD%93%E8%AE%B2%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFHook">https://www.cnblogs.com/iBinary/p/7599789.html具体讲解什么是Hook</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Init初始化</title>
      <link href="/2022/02/03/Init%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2022/02/03/Init%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="ELF文件结构"><a href="#ELF文件结构" class="headerlink" title="ELF文件结构"></a>ELF文件结构</h1><p><a href="https://carrychen.website/2021/05/14/elf-format/">https://carrychen.website/2021/05/14/elf-format/</a></p><p> .init节定义了一个_init函数，用于可执行目标文件开始时的初始化工作。当进入主程序之前，系统先执行.init节的指令代码初始化 </p><h1 id="例题-hgame2022-week2-fakeshell"><a href="#例题-hgame2022-week2-fakeshell" class="headerlink" title="例题-hgame2022-week2-fakeshell"></a>例题-hgame2022-week2-fakeshell</h1><p>先去看看init段进行了什么处理</p><p><img src="/2022/02/03/Init%E5%88%9D%E5%A7%8B%E5%8C%96/1643870839069.png"></p><p><img src="/2022/02/03/Init%E5%88%9D%E5%A7%8B%E5%8C%96/1643870867197.png"></p><p><img src="/2022/02/03/Init%E5%88%9D%E5%A7%8B%E5%8C%96/1643870876729.png"></p><p>在第二个函数发现了处理</p><p><img src="/2022/02/03/Init%E5%88%9D%E5%A7%8B%E5%8C%96/1643870922345.png"></p><p>查看aHappyh4me交叉引用</p><p><img src="/2022/02/03/Init%E5%88%9D%E5%A7%8B%E5%8C%96/1643870957940.png"></p><p>可以看到后面还有操作</p><p>定位到加密函数</p><p><img src="/2022/02/03/Init%E5%88%9D%E5%A7%8B%E5%8C%96/1643870991851.png"></p><p><img src="/2022/02/03/Init%E5%88%9D%E5%A7%8B%E5%8C%96/1643871002931.png"></p><p>可以知道是rc4加密，密钥在init段被修改了</p><p>写脚本，也可以使用工具CaptfEncoder-win-1.1.0</p><p>得到flag</p><p><img src="/2022/02/03/Init%E5%88%9D%E5%A7%8B%E5%8C%96/1643871135186.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SEH原理和例题</title>
      <link href="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/"/>
      <url>/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="WINDOWS下的异常处理"><a href="#WINDOWS下的异常处理" class="headerlink" title="WINDOWS下的异常处理"></a>WINDOWS下的异常处理</h1><h2 id="异常列表"><a href="#异常列表" class="headerlink" title="异常列表"></a>异常列表</h2><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220203125855.jpg"></p><h1 id="SEH"><a href="#SEH" class="headerlink" title="SEH"></a>SEH</h1><p><a href="https://www.cnblogs.com/Sna1lGo/p/14732048.html#:~:text=Windows%E4%B8%AD,%E5%88%99%E7%9B%B4%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E3%80%82%E4%BB%8B%E7%BB%8D">https://www.cnblogs.com/Sna1lGo/p/14732048.html#:~:text=Windows%E4%B8%AD,%E5%88%99%E7%9B%B4%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E3%80%82介绍</a></p><h2 id="题目——hagme2022——week2——creakme2"><a href="#题目——hagme2022——week2——creakme2" class="headerlink" title="题目——hagme2022——week2——creakme2"></a>题目——hagme2022——week2——creakme2</h2><p>在静态分析中，只找到了tea加密算法，直接写脚本解不出来，去查看汇编代码（因为有时候ida没办法识别出一些汇编）</p><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/1643864939414.png"></p><p>第一个框对应上上面那句代码，这里按/就会显示出来对应反编译过来的伪代码</p><p>下面两个框的都是没被识别的语句</p><p>在图中位置下断点进行动态调试，会报错</p><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/1643865333034.png"></p><p>因为除数不能为0，去看看汇编</p><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/1643865908164.png"></p><p>按；写下注释</p><p>开始动态调试</p><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/1643866006832.png"></p><p>选择yes，发现进入到这段未被反编译的语句</p><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/1643866024820.png"></p><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/1643866787250.png"></p><p>第二次执行到这一段代码，可以看到ecx寄存器的值不是0，不会触发异常</p><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/1643866890816.png"></p><p>发现没有执行异或，而是继续往下执行，这就是下一步进行的反汇编语句</p><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/1643866944920.png"></p><p>因此可以知道，当变量num的最高位为0的时候，会触发异常，这时候系统会交给SEH进行处理，即__try代码</p><p>__except会执行异常后代码</p><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/1643867671850.png"></p><p>按空格查看执行顺序</p><p><img src="/2022/02/03/SEH%E5%8E%9F%E7%90%86%E5%92%8C%E4%BE%8B%E9%A2%98/1643867149242.png"></p><p>会发现这样一段独立出来的汇编代码</p><p>所以就可以写脚本，因为是unsigned int，右移31位就能知道最高位了</p><p>脚本</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(){    unsigned int tmp1, tmp2;    unsigned int num;    unsigned int init_num=0;    int Buf2[8] = { 0 };    unsigned int key[10] = { 1,2,3,4,5,6,7,8.9,0 };    Buf2[0] = 0x457E62CF;    Buf2[1] = 0x9537896C;    Buf2[2] = 0x1F7E7F72;    Buf2[3] = 0xF7A073D8;    Buf2[4] = 0x8E996868;    Buf2[5] = 0x40AFAF99;    Buf2[6] = 0xF990E34;    Buf2[7] = 0x196F4086;    for (int i = 0; i &lt; 32; i++)    {        init_num += 2654435761;        if ((init_num &gt;&gt;31) == 0)        {            init_num ^= 0x1234567;        }    }//0C78E4D05    for (int j = 0; j &lt; 8; j += 2)    {        tmp1 = Buf2[j], tmp2 = Buf2[j + 1];        num = init_num;        for (int i = 0; i &lt; 32; i++)        {            tmp2 -= (num + key[(num &gt;&gt; 11) &amp; 3]) ^ (tmp1 + ((16 * tmp1) ^ (tmp1 &gt;&gt; 5)));            if ((num&gt;&gt;31) == 0)            {                num ^= 0x01234567;            }            num -= 2654435761;            tmp1 -= (num + key[num &amp; 3]) ^ (tmp2 + ((16 * tmp2) ^ (tmp2 &gt;&gt; 5)));        }        Buf2[j] = tmp1;        Buf2[j + 1] = tmp2;    }    for (int i = 0; i &lt; 8; i++)    {        printf("%x\n", Buf2[i]);    }    printf("%s", Buf2);}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言汇编2</title>
      <link href="/2022/02/02/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%962/"/>
      <url>/2022/02/02/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%962/</url>
      
        <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VM逆向</title>
      <link href="/2022/01/23/VM%E9%80%86%E5%90%91/"/>
      <url>/2022/01/23/VM%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Dasctf——EasyVm"><a href="#Dasctf——EasyVm" class="headerlink" title="Dasctf——EasyVm"></a>Dasctf——EasyVm</h1><p>一开始有个花指令，是比较常见的永真跳转，先对call指令按u取消定义，将e8改为90，再重新弄成函数就可以了</p><p>先找到加密的函数</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642951424173.png"></p><p>点进去看看</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642951469199.png"></p><p>这里是base64变种，在最后加了一个异或操作，先把脚本写出来</p><pre class="language-c" data-language="c"><code class="language-c">#include&lt;stdio.h&gt;#include&lt;string.h&gt;char base64_table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";int findIndex(char c, char b64_table[]){for (int i = 0; i &lt; 64; ++i){if (c == b64_table[i])return i;}}char* base64_decode(char code[], char str[], char b64_table[]){char memstr[200] = { 0 };memcpy(memstr, code, strlen(code));int len = strlen(code);/*while (code[len] != '!' &amp;&amp; code[len] != 0){len++;}*/for (int i = 0, i_ = 0; i &lt; len; i += 4, i_ += 3){str[i_] = (findIndex(memstr[i]^0xa, b64_table) &lt;&lt; 2) | (findIndex(memstr[i + 1]^0xb, b64_table) &amp; 0x30) &gt;&gt; 4;str[i_ + 1] = (findIndex(memstr[i + 1]^0xb, b64_table) &amp; 0xf) &lt;&lt; 4 | (findIndex(memstr[i + 2]^0xc, b64_table) &amp; 0x3c) &gt;&gt; 2;str[i_ + 2] = (findIndex(memstr[i + 2]^0xc, b64_table) &amp; 0x03) &lt;&lt; 6 | (findIndex(memstr[i + 3]^0xd, b64_table));}int str_len = (len / 4) * 3 + len % 4;if (len % 4){str_len -= 1;}str[str_len] = 0;return str;}int main(){char code[100] = "";char decode[] = { 0 };base64_decode(code, decode, base64_table);printf("%s", decode);return 0;}</code></pre><p>接下来就是vm的部分</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642951694407.png"></p><p>先看func函数的类型，是指针数组</p><p>这里需要结合动调看每条指令对应的操作</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642953729321.png"></p><p>在这里下断点之后F7进入函数</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642953871966.png"></p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642955403773.png"></p><p>这就是func数组存放的东西，因为是指针，所以要先按d转为dd才会显示</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642955602049.png"></p><p>先把指令提取出来</p><pre class="language-c" data-language="c"><code class="language-c">unsigned char ida_chars[] ={  0xCA, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x00, 0x00, 0x00, 0x00,  0xCC, 0xCF, 0xC9, 0xEE, 0x00, 0x00, 0x00, 0xCF, 0xD1, 0xD3,  0x01, 0xFE, 0xC2, 0xD2, 0x39, 0x00, 0x00, 0x00, 0xD4, 0xEC,  0xFF, 0x00};</code></pre><p>F8单步调试</p><p>0xCA</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642955631076.png"></p><p>0xCB</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642955978948.png"></p><p>0xCC</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642955994447.png"></p><p>0xCF</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642956392630.png"></p><p>每执行完再进入func[2]都能知道当前位置，便于查看指令</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642956568041.png"></p><p>0xc9</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642956806744.png"></p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642957130761.png"></p><p>0xd1</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642957467393.png"></p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642957487310.png"></p><p>这里本来赋值为0，1，2，为了保持字符相等的情况，把 this[5]全部赋值为1</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642987459030.png"></p><p>0xd3</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642988305784.png"></p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642988338522.png"></p><p>0xc2</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642988366450.png"></p><p>0xd2</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642988655617.png"></p><p>长度判断</p><p>0xd4</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642988824766.png"></p><p>0xcc</p><p>接下来又回到0xcc，所以就能猜测是循环做了异或操作，然后判断</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/1642989162099.png"></p><table><thead><tr><th>func[1]</th><th>指令集</th></tr></thead><tbody><tr><td>func[2]</td><td>加密后的flag的字符</td></tr><tr><td>func[3]</td><td>0</td></tr><tr><td>func[4]</td><td>索引</td></tr><tr><td>func[5]</td><td>判断字符相等</td></tr><tr><td>func[6]</td><td>对比的flag</td></tr><tr><td>func[7]</td><td>0</td></tr><tr><td>func[8]</td><td>加密后的字符串</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td>0xca</td><td>先将this[1]指令后的数据存放到this[3]，然后往后跳转5，正好对应了下一条指令,一开始this[1]后一个数据为0，要先转为 dword</td></tr><tr><td></td><td></td></tr><tr><td>0xcb</td><td>先将this[1]指令后的数据存放到this[4]，然后往后跳转5，这也是下一条指令</td></tr><tr><td></td><td></td></tr><tr><td>0xcc</td><td>把this[2]先赋值为this[8]+this[4]，这里this[4]是个整数，所以猜测this[4]是索引，然后继续执行下一指令</td></tr><tr><td></td><td></td></tr><tr><td>0xcf</td><td>将this[3]和this[2]的值异或后存放在this[3],进入下一条指令</td></tr><tr><td></td><td></td></tr><tr><td>0xc9</td><td>先把this[1]下一个数据赋值给this[2],进入下一条指令，也就是0xee</td></tr><tr><td></td><td></td></tr><tr><td>0xcf</td><td>将this[3]和this[2]的值异或后存放在this[3],进入下一条指令</td></tr><tr><td></td><td></td></tr><tr><td>0xd1</td><td>根据this[4]的索引来进行字符比较，这里是调试过程，所以为了进行下一步，需要修改汇编指令</td></tr><tr><td></td><td></td></tr><tr><td>0xd3</td><td>v1是指针，解引用是v1下一个位置，也就是0x1，整个就是0xee，这时候然后指向下三个位置，也就是c2指令</td></tr><tr><td></td><td></td></tr><tr><td>0xc2</td><td>索引this[4]+1</td></tr><tr><td></td><td></td></tr><tr><td>0xd2</td><td>this[4]是索引，所以是判断是否结束，这里没结束，所以this[5]赋值为0</td></tr><tr><td></td><td></td></tr><tr><td>0xd4</td><td>ec+2==ee</td></tr></tbody></table><p>整个过程就是这样</p><p><img src="/2022/01/23/VM%E9%80%86%E5%90%91/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220124125427.jpg"></p><p>因为偶数次的异或等于不变，所以只需对奇数次的进行异或即可</p><p>最终脚本</p><pre class="language-c" data-language="c"><code class="language-c">#include&lt;stdio.h&gt;#include&lt;string.h&gt;char base64_table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";int findIndex(char c, char b64_table[]){for (int i = 0; i &lt; 64; ++i){if (c == b64_table[i])return i;}}char* base64_decode(char code[], char str[], char b64_table[]){char memstr[200] = { 0 };memcpy(memstr, code, strlen(code));int len = strlen(code);/*while (code[len] != '!' &amp;&amp; code[len] != 0){len++;}*/for (int i = 0, i_ = 0; i &lt; len; i += 4, i_ += 3){str[i_] = (findIndex(memstr[i], b64_table) &lt;&lt; 2) | (findIndex(memstr[i + 1], b64_table) &amp; 0x30) &gt;&gt; 4;str[i_ + 1] = (findIndex(memstr[i + 1], b64_table) &amp; 0xf) &lt;&lt; 4 | (findIndex(memstr[i + 2], b64_table) &amp; 0x3c) &gt;&gt; 2;str[i_ + 2] = (findIndex(memstr[i + 2], b64_table) &amp; 0x03) &lt;&lt; 6 | (findIndex(memstr[i + 3], b64_table));}int str_len = (len / 4) * 3 + len % 4;if (len % 4){str_len -= 1;}str[str_len] = 0;return str;}int main(){char s[] ={  190,  54, 172,  39, 153,  79, 222,  68, 238,  95,  218,  11, 181,  23, 184, 104, 194,  78, 156,  74,  225,  67, 240,  34, 138,  59, 136,  91, 229,  84,  255, 104, 213, 103, 212,   6, 173,  11, 216,  80,  249,  88, 224, 111, 197,  74, 253,  47, 132,  54,  133,  82, 251, 115, 215,  13,0};char s2[] = { 0 };for (int i = 0; i &lt; 56; i+=2){s[i] ^= 0xee;}for (int i = 0; i &lt; 56; ++i){s2[i] = s[i];for (int k = i; k &gt; 0; k--){s2[i] ^= (s2[k - 1]);//该字符前面的全部都要异或上}}//printf("%s", s2);for (int i = 0; i &lt; 56; i = i + 4){s2[i] ^= 0xA;s2[i + 1] ^= 0xB;s2[i + 2] ^= 0xC;s2[i + 3] ^= 0xD;}char decode[] = { 0 };base64_decode(s2, decode, base64_table);printf("%s", decode);return 0;}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓知识</title>
      <link href="/2022/01/22/%E5%AE%89%E5%8D%93%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/01/22/%E5%AE%89%E5%8D%93%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="APK基本结构"><a href="#APK基本结构" class="headerlink" title="APK基本结构"></a>APK基本结构</h1><p><a href="https://www.cnblogs.com/zhaijiahui/p/6916556.html">https://www.cnblogs.com/zhaijiahui/p/6916556.html</a></p><p>因为java语言没办法直接控制硬件，所以要使用C/C++来写代码，保存在so文件中 </p><p>反编译之后是smali代码，动态调试</p><p>assets：存放未编译的资源</p><p>lib：存放so文件，即本地代码</p><p>libs：第三方包</p><p>META-INF：存放签名</p><p>res：编译后的资源</p><p>AndroidManifest.xml：用于存放清单</p><p>.dex文件：反编译后为smali代码</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言汇编</title>
      <link href="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/"/>
      <url>/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/</url>
      
        <content type="html"><![CDATA[<h1 id="VC6基础操作"><a href="#VC6基础操作" class="headerlink" title="VC6基础操作"></a>VC6基础操作</h1><p>F7：编译、F5：调试、F9：设置断点、F10：单步步过、F11：单步进入、shift+F5：结束调试</p><p>调试过程打开寄存器窗口和反汇编窗口</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643095481259.png"></p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643095520646.png"></p><h1 id="裸函数"><a href="#裸函数" class="headerlink" title="裸函数"></a>裸函数</h1><p>编译器不会管的函数</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643097998389.png"></p><p>__declspec(naked) Func()</p><p>调用空的裸函数会出现错误，因为有call，却没有ret</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643123413854.png"></p><p>进入后直接跳到int3，运行程序会报错</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643123914848.png"></p><p>解决这种只需要加入汇编语句ret，在C语言程序加入汇编语句，需要用到__asm{}。也就是说可以自己在里面写汇编代码来实现需求。</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643126281063.png"></p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643126324265.png"></p><p>执行完这段代码，ret回来了</p><h1 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h1><table><thead><tr><th>__cdecl（c、c++默认）</th><th>从右至左入栈</th><th>调用者清理栈</th></tr></thead><tbody><tr><td>__stdcall</td><td>从右至左入栈</td><td>自身清理堆栈（内平栈）子函数平衡堆栈</td></tr><tr><td>__fastcall</td><td>ECX/EDX传送前两个，剩下的从右至左，寄存器传递速度更快。当只有两个参数传递进去，不需要平衡堆栈</td><td>自身清理堆栈</td></tr></tbody></table><p>所以不能通过ret来分析函数参数的个数</p><p>__cdecl</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643125931583.png"></p><p>外平栈</p><p>内部只有ret</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643126021930.png"></p><p>__stdcall</p><p>右边的参数先入栈</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643126780828.png"></p><p>可以看到这里call之后没有add来回复堆栈平衡，进入调用函数</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643126852766.png"></p><p>可以看到ret变成了ret 8，这就是内平栈</p><p>__fastcall</p><p>两个参数存放在寄存器</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643127369433.png"></p><p>没有修改堆栈，所以不需要add回复堆栈</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643127503312.png"></p><p>有push和mov，外面没有add，进去看</p><p>也是内平栈</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643127554833.png"></p><h1 id="参数个数"><a href="#参数个数" class="headerlink" title="参数个数"></a>参数个数</h1><p>公式一：寄存器+ret 4=参数个数</p><p>公式二：寄存器+[esp+8]+[ebp+0x]=参数个数</p><h1 id="寻找程序入口"><a href="#寻找程序入口" class="headerlink" title="寻找程序入口"></a>寻找程序入口</h1><p>callstack，调用窗口</p><p>main是我们写的程序的入口，但是不是真正程序的入口</p><p>因为在main函数之前需要调用如下函数</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643127627555.png"></p><p>在callstack发现这个函数</p><p>Getversion()</p><p>_headp_int()</p><p>GetCommandLineA()</p><p>_crtGetEnvironmentStringA()</p><p>_setargv()</p><p>_setenvp()</p><p>_cinit()  </p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643127791606.png"></p><p>main函数具有三个参数，所以要寻找具有三个参数的函数，找三个push，并且调用完会add 0xc</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643127884930.png"></p><p>这里很符合</p><p>下断点进入，这里才是main函数</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643127941350.png"></p><h1 id="数据类型与数据存储"><a href="#数据类型与数据存储" class="headerlink" title="数据类型与数据存储"></a>数据类型与数据存储</h1><p>1、存储数据的宽度 </p><p>2、存储数据的格式</p><p>3、作用范围</p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>char、int、long、short：字节数1、4、4、2，对应上byte、dword、dword、word，long long在VC6对应__int 64</p><p>只会根据数据宽度进行操作，超出数据宽度的不会做修改</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643188104181.png"></p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643128939675.png"></p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643128998071.png"></p><p>g存储的只有0x56</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643129038958.png"></p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643129130357.png"></p><p>数据窗口是小端序</p><h4 id="有符号与无符号"><a href="#有符号与无符号" class="headerlink" title="有符号与无符号"></a>有符号与无符号</h4><p>C语言默认是有符号数</p><p>在内存中存储时无区别，但是在类型转换、比较大小和数学运算时需要注意</p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>float、double在存储方式遵从IEEE的规范</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643166176045.png"></p><h1 id="局部变量和全局变量的区分"><a href="#局部变量和全局变量的区分" class="headerlink" title="局部变量和全局变量的区分"></a>局部变量和全局变量的区分</h1><p>局部变量是以ebp-开头的</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643180778946.png"></p><p>全局变量在编译完之后地址就不会改变</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643180903634.png"></p><p>直接放进地址，所以就是全局变量</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643181101615.png"></p><p>在vs2022会因为编译器版本问题，出现不同的汇编指令，但都是大同小异</p><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><p>cmp+jcc指令</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643181892321.png"></p><p>cmp相当于减法，前面一个减后面一个，因为x&gt;y时继续执行，所以跳转指令的条件是小于等于</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643182181368.png"></p><p>改成&gt;=之后，汇编指令变成了jl，汇编指令是和C语言反着来的</p><p>&lt;</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643182345813.png"></p><p>==</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643182397987.png"></p><h1 id="多分支语句"><a href="#多分支语句" class="headerlink" title="多分支语句"></a>多分支语句</h1><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643183573683.png"></p><p>x&lt;=y的情况直接跳转到else中</p><p>x&gt;y则往后执行，执行完之后jmp跳转到else语句的后面</p><p>因为mov两边不能都是地址，所以需要用到寄存器</p><h2 id="if、else-if、else"><a href="#if、else-if、else" class="headerlink" title="if、else if、else"></a>if、else if、else</h2><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643184460823.png"></p><h1 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h1><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643187985614.png"></p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643187574671.png"></p><p>内部得到eax的值，eax一般用来存储返回值</p><p>参数传递4个字节</p><p>压栈的时候都是eax</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643188571362.png"></p><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="switch语句反汇编"><a href="#switch语句反汇编" class="headerlink" title="switch语句反汇编"></a>switch语句反汇编</h2><p>当分支较少时采取if……else if ……else的方式</p><h3 id="case连续"><a href="#case连续" class="headerlink" title="case连续"></a>case连续</h3><p>创建大表</p><p> <img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643726580401.png"></p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643726615144.png"></p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643726837151.png"></p><p>sub</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643727141397.png"></p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643727234505.png"></p><p>这里修改参数为103，case条件也修改，发现sub的值发生了变化，所以可以知道sub的值对应最小的case条件的值，这样对应上了大表的位置，所以sub是为了跳转到生成的大表</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643727350589.png"></p><p>正好是case 103的地址</p><h3 id="case连续但中断"><a href="#case连续但中断" class="headerlink" title="case连续但中断"></a>case连续但中断</h3><p>101、102、103的情况使用default的地址填充</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643727925669.png"></p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643728035747.png"></p><p>只要有断开的，就会浪费一片内存地址，所以当间隔太远就不会使用这种方式</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643728378338.png"></p><p>但是当间隔比较大的时候，出现了新情况</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643728454178.png"></p><p>因为已经清空了edx，所以可使用该寄存器，这句话相当于把0x004010dd+eax的值对应地址的内容放入到dl中，dl是八位，对应1个字节，这个就是小表</p><p>当连续但相差较远时会采用小表</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643728595269.png"></p><h3 id="case不连续"><a href="#case不连续" class="headerlink" title="case不连续"></a>case不连续</h3><p>当差值太大，不会生成大表，会直接采取if……else结构</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643727643051.png"></p><p>先判断大于je，再判断等于cmp+jmp</p><h2 id="while循环反汇编"><a href="#while循环反汇编" class="headerlink" title="while循环反汇编"></a>while循环反汇编</h2><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643730937945.png"></p><p>je是当ZF标志位为0是跳转，test是按位与操作，用于判断寄存器的值是否为0</p><h2 id="do……while反汇编"><a href="#do……while反汇编" class="headerlink" title="do……while反汇编"></a>do……while反汇编</h2><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643731312416.png"></p><h2 id="for循环反汇编"><a href="#for循环反汇编" class="headerlink" title="for循环反汇编"></a>for循环反汇编</h2><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643730507558.png"></p><h1 id="数组在内存的存储和寻址"><a href="#数组在内存的存储和寻址" class="headerlink" title="数组在内存的存储和寻址"></a>数组在内存的存储和寻址</h1><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643368384236.png"></p><p>这里数组的存储是从高位往低位存储，也就是从右到左开始存储到缓冲区中，替换缓冲区的数值</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643368588775.png"></p><p>可以看到数组的存储</p><p>再看看数组引用</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643368768572.png"></p><p>[ebp-4]是第一个形参的地址</p><p>[ebp-1ch]对应上数组首元素的地址，eax是存储着第一个形参，****<em>4是因为是int型数组，如果是short，则</em>2</p><p>，数组比较常见的形式就是[ebp+寄存器*数组类型对应的字节大小-数字]</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643369846681.png"></p><p>因为数组下标存在变量，而mov两边不能同时是地址，所以需要先用寄存器存储下标，而直接引用就不需要，即arr[1]</p><h2 id="字符串存储"><a href="#字符串存储" class="headerlink" title="字符串存储"></a>字符串存储</h2><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643371348362.png"></p><p>因为每个寄存器最多存储四个字节，所以需要用到多个寄存器来存储</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643371421546.png"></p><p>在数据窗口中是这样存放的</p><p>寄存器可以重复使用，比如长度不够的情况</p><p><img src="/2022/01/20/C%E8%AF%AD%E8%A8%80%E6%B1%87%E7%BC%96/1643371753305.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>汇编</title>
      <link href="/2022/01/19/%E6%B1%87%E7%BC%96/"/>
      <url>/2022/01/19/%E6%B1%87%E7%BC%96/</url>
      
        <content type="html"><![CDATA[<h1 id="堆栈图"><a href="#堆栈图" class="headerlink" title="堆栈图"></a>堆栈图</h1><p>调用函数实现两数相加</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642592553591.png"></p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642592569833.png"></p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642592579671.png"></p><p>因为pop之后，有一部分的值还是之前保留下来的，所以要进行填充</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642592639529.png"></p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642592648442.png"></p><h1 id="LEA和MOV的区别"><a href="#LEA和MOV的区别" class="headerlink" title="LEA和MOV的区别"></a>LEA和MOV的区别</h1><p>lea是“load effective address”的缩写，简单的说，lea指令可以用来将一个内存地址直接赋给目的操作数，例如：</p><p>lea eax,[ebx+8]就是将ebx+8这个值直接赋给eax，而不是把ebx+8处的内存地址里的数据赋给eax。</p><p>而mov指令则恰恰相反，例如：</p><p>mov eax,[ebx+8]则是把内存地址为ebx+8处的数据赋给eax。</p><h1 id="函数在汇编的结构"><a href="#函数在汇编的结构" class="headerlink" title="函数在汇编的结构"></a>函数在汇编的结构</h1><p>函数调用前，堆栈结构如下</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642649724413.png"></p><p>EBP栈底高位，ESP栈顶低位</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642649843226.png"></p><p>下面的三个PUSH是把函数的参数压入栈中，这里是立即数，也可以是寄存器里面的值，注意PUSH指令执行完ESP-4，即栈顶往低位移动</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642650060363.png"></p><p>堆栈图如下</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642650200472.png"></p><p>下一步是CALL指令，F7单步步入，CALL指令会修改EIP的值，将CALL指令下一条指令的地址压入栈顶 ，并且修改EIP的值，相当于一条PUSH和JMP指令，JMP只会修改EIP的值，EIP存放下一条会执行指令的地址</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642650793595.png"></p><p>堆栈图</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642651074289.png"></p><p>这里JMP直接F8跳转过去，进入函数，入口是PUSH EBP</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642651212988.png"></p><p>可以看到ESP没有变化</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642651299175.png"></p><p>在函数调用中，这三步是提升栈顶，开辟空间</p><p>运行完堆栈应该如下</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642651845629.png"></p><p>运行看看</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642651761171.png"></p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642651894330.png"></p><p>接下来这三步是保存现场，因为在函数调用中，这些寄存器可能被用到，所以要先把里面原本的值压入栈中，此时堆栈图为</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642652121644.png"></p><p>EBP是FED0</p><p>运行</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642652204239.png"></p><p>已经被压入栈中 </p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642652304817.png"></p><p>接下来这步是填充缓冲区</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642652335865.png"></p><p>可以看到堆栈图中开辟的空间里面的值并不是为0，这是因为在调用完函数之后，这些空间的值没有被清除，所以需要填充</p><p>堆栈图</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642656762839.png"></p><p>这里有一点需要说明，local.18是什么意思呢</p><p>看下图</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642656813955.png"></p><p>我们去OD修改设置</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642656868498.png"></p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642656879655.png"></p><p>取消掉就可以了，刚才的指令发生了变化</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642656905307.png"></p><p>接下来解释这几句指令</p><p>lea是取地址，意思是将ebp-0x48的地址存入EDI中</p><p>ECX一般用来存放循环次数，这里是0x12，即18次，这个对应开辟空间的大小</p><p>mov eax，0xCCCCCCCC是填充缓冲区</p><p>最后一句rep表示重复次数，次数由ECX决定，stos dword这条指令表示将EAX内的值放入EDI指定的内存单元中，注意执行一次后EDI会移动4，加减由DF标志位决定</p><p>DF决定movs执行完后esi和edi的移动方向，当为0时，加，否则为减。</p><p>运行</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642657323715.png"></p><p>看接下来的几行指令</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642657469555.png"></p><p>1、将0x2赋给ebp地址的前一个内存单元，<strong>这里的0x2就是局部变量</strong></p><p>2、将EBP+0xc的值赋给eax，eax的值压入栈中，下面也是，画堆栈图</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642657989835.png"></p><p>这里压入栈的数值，将作为内部嵌套函数的参数</p><p>执行完之后</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642658026768.png"></p><p>接下来又是调用函数，将CALL指令下一条指令的地址压入栈顶，EIP修改</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642658203867.png"></p><p>F7步入</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642658261575.png"></p><p>F8之后</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642658343466.png"></p><p>红框部分和前面一样，都是调用函数前提升栈顶、开辟空间、保存现场、填充缓冲区，主要看操作部分</p><p>先把堆栈图画好</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642659116555.png"></p><p>接下来看操作</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642659284922.png"></p><p>这些都没有改变堆栈的值，第一条将0xA赋给EBP-0x4的内存单元，对应堆栈写出操作方式 EAX的值为1+2，最后+0xA，所以最后EAX的值为0xD</p><p>运行</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642659505718.png"></p><p>此时函数的操作部分已经结束，接下来就是退出函数了</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642659609650.png"></p><p>对比一下，跟函数开始正好是反过来的</p><p>POP是先出栈再移动 ，这几个POP就相当于恢复现场，要恢复到未调用函数前，这也是为什么要先把这些值压入栈中的原因。</p><p>mov就是降低栈底，恢复到原来的位置</p><p>retn指令相当于POP EIP，先将栈顶的值赋给EIP，然后栈顶指针移动</p><p>堆栈图如下</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642660789466.png"></p><p>执行后</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642660837614.png"></p><p>可以看到执行完之后，缓冲区的内容不会清理，这也是为什么需要填充缓冲区</p><p>回到后我们发现一个问题，就是函数调用前后堆栈不平衡，堆栈平衡是指调用函数前后堆栈应该相等，这里是因为将函数的参数压入了栈，所以需要接下来的ADD平衡堆栈</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642660910037.png"></p><p>执行完之后</p><p><img src="/2022/01/19/%E6%B1%87%E7%BC%96/1642661042648.png"></p><p>和调用前一致，所以没问题了</p><p>剩下的就是重复之前的操作了，先执行函数操作指令，然后POP还原现场，retn后ADD恢复堆栈平衡</p><p>函数的参数存放在ebp+0x8开始因为call指令会将下一条指令地址压入栈中，而局部变量从ebp-0x4开始</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Z3</title>
      <link href="/2022/01/17/Z3/"/>
      <url>/2022/01/17/Z3/</url>
      
        <content type="html"><![CDATA[<p>先来看官方文档</p><p><a href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm">https://ericpony.github.io/z3py-tutorial/guide-examples.htm</a></p><p>这个博客也不错</p><p><a href="https://blog.csdn.net/qq_38154820/article/details/108656598">https://blog.csdn.net/qq_38154820/article/details/108656598</a></p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>  基本语句</p><p>Op    Mnmonics    Description<br>            0    true    恒真<br>            1    flase    恒假<br>            2    =    相等<br>            3    distinct    不同<br>            4    ite    if-then-else<br>            5    and    n元 合取（其中条件必须全部满足）<br>            6    or    n元 析取（其中条件满足之一即可）<br>            7    iff    implication<br>            8    xor    异或<br>            9    not    否定<br>            10    implies    Bi-implications</p><p>1、创建容器</p><p>s=Solver()</p><p>2、创建变量，变量有Int(整型)、BitVector(字节)、数组</p><p>3、添加约束条件</p><p>s.add(约束条件)，需要注意Int不能进行移位运算，python除是//</p><p>4、判断是否存在</p><pre class="language-python" data-language="python"><code class="language-python">if s.check() == sat:      m = s.model()      print(m)else:      print("no answer")</code></pre><h1 id="变量为整型"><a href="#变量为整型" class="headerlink" title="变量为整型"></a>变量为整型</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]Universe_final_answer">https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]Universe_final_answer</a></p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p><img src="/2022/01/17/Z3/1642416626641.png"></p><p>这里就直接放脚本了</p><pre class="language-python" data-language="python"><code class="language-python">from z3 import*s=Solver()v1=Int('v1')v2=Int('v2')v3=Int('v3')v4=Int('v4')v5=Int('v5')v6=Int('v6')v7=Int('v7')v8=Int('v8')v9=Int('v9')v11=Int('v11')s.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)s.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)s.add(-103 * v11 + 120 * v8 + 108 * v7 + 48 * v4 + -89 * v3 + 78 * v1 - 41 * v2 + 31 * v5 - (v6 *64) - 120 * v9 == -10283)s.add(71 * v6 + (v7 *128) + 99 * v5 + -111 * v3 + 85 * v1 + 79 * v2 - 30 * v4 - 119 * v8 + 48 * v9 - 16 * v11 == 22855)s.add(5 * v11 + 23 * v9 + 122 * v8 + -19 * v6 + 99 * v7 + -117 * v5 + -69 * v3 + 22 * v1 - 98 * v2 + 10 * v4 == -2944)s.add(-54 * v11 + -23 * v8 + -82 * v3 + -85 * v2 + 124 * v1 - 11 * v4 - 8 * v5 - 60 * v7 + 95 * v6 + 100 * v9 == -2222)s.add(-83 * v11 + -111 * v7 + -57 * v2 + 41 * v1 + 73 * v3 - 18 * v4 + 26 * v5 + 16 * v6 + 77 * v8 - 63 * v9 == -13258)s.add(81 * v11 + -48 * v9 + 66 * v8 + -104 * v6 + -121 * v7 + 95 * v5 + 85 * v4 + 60 * v3 + -85 * v2 + 80 * v1 == -1559)s.add(101 * v11 + -85 * v9 + 7 * v6 + 117 * v7 + -83 * v5 + -101 * v4 + 90 * v3 + -28 * v1 + 18 * v2 - v8 == 6308)s.add(99 * v11 + -28 * v9 + 5 * v8 + 93 * v6 + -18 * v7 + -127 * v5 + 6 * v4 + -9 * v3 + -93 * v1 + 58 * v2 == -1697)if s.check()==sat:    result=s.model()print(result)</code></pre><h1 id="变量为数组"><a href="#变量为数组" class="headerlink" title="变量为数组"></a>变量为数组</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#[GWCTF%202019]xxor">https://buuoj.cn/challenges#[GWCTF%202019]xxor</a></p><h2 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h2><p><img src="/2022/01/17/Z3/1642417350041.png"></p><pre class="language-python" data-language="python"><code class="language-python">from z3 import*#添加六个Int数据到s变量中s = [Int('s%d' % i) for i in range(6)]a=Solver()#多个约束条件可以使用逗号间隔a.add(s[2]-s[3]==2225223423,s[3]+s[4]==4201428739,s[2]-s[4]==1121399208,s[0]==0xdf48ef7e,s[5]==0x84f30420,s[1]==0x20caacf4)if a.check() == sat:    print(a.model())</code></pre><p>这样得到的结果不会是数组的形式，如下得到的是数组形式</p><p><img src="/2022/01/17/Z3/1642418166049.png"></p><h1 id="数独问题"><a href="#数独问题" class="headerlink" title="数独问题"></a>数独问题</h1><p>数独问题就是9×9的方块填数（只能是1-9），分成3×3的小方块，行列数字不同，每个小方块数字不能重复</p><p>先贴一下</p><pre class="language-python" data-language="python"><code class="language-python">from z3 import *# 9x9整数变量矩阵X = [ [ Int("x_%s_%s" % (i+1, j+1)) for j in range(9) ]      for i in range(9) ]  # 每个单元格包含{1，…，9}中的值cells_c  = [ And(1 &lt;= X[i][j], X[i][j] &lt;= 9)             for i in range(9) for j in range(9) ]  # 每行最多包含一个数字一次rows_c   = [ Distinct(X[i]) for i in range(9) ]  # 每列最多包含一个数字cols_c   = [ Distinct([ X[i][j] for i in range(9) ])             for j in range(9) ]  # 每个3x3正方形最多包含一个数字sq_c     = [ Distinct([ X[3*i0 + i][3*j0 + j]                        for i in range(3) for j in range(3) ])             for i0 in range(3) for j0 in range(3) ]  sudoku_c = cells_c + rows_c + cols_c + sq_c  # 数独实例，我们用'0'表示空单元格instance = ((0,0,0,0,9,4,0,3,0),            (0,0,0,5,1,0,0,0,7),            (0,8,9,0,0,0,0,4,0),            (0,0,0,0,0,0,2,0,8),            (0,6,0,2,0,1,0,5,0),            (1,0,2,0,0,0,0,0,0),            (0,7,0,0,0,0,5,2,0),            (9,0,0,0,6,5,0,0,0),            (0,4,0,9,7,0,0,0,0))  instance_c = [ If(instance[i][j] == 0,                  True,                  X[i][j] == instance[i][j])               for i in range(9) for j in range(9) ]  s = Solver()s.add(sudoku_c + instance_c)if s.check() == sat:    m = s.model()    r = [ [ m.evaluate(X[i][j]) for j in range(9) ]          for i in range(9) ]    print_matrix(r)else:    print("failed to solve")</code></pre><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>这是改了的数独，比较简单，拿来练练手</p><p><a href="https://buuoj.cn/challenges#[GUET-CTF2019]number_game">https://buuoj.cn/challenges#[GUET-CTF2019]number_game</a></p><h2 id="Z3在题目的运用"><a href="#Z3在题目的运用" class="headerlink" title="Z3在题目的运用"></a>Z3在题目的运用</h2><pre class="language-python" data-language="python"><code class="language-python">from z3 import *# 5*5整数变量矩阵X = [[Int("x_%s_%s" % (i + 1, j + 1)) for j in range(5)]     for i in range(5)]# 每个单元格包含{0，…，4}中的值cells_c = [And(0 &lt;= X[i][j], X[i][j] &lt;= 4)           for i in range(5) for j in range(5)]# 每行最多包含一个数字一次rows_c = [Distinct(X[i]) for i in range(5)]# 每列最多包含一个数字cols_c = [Distinct([X[i][j] for i in range(5)])          for j in range(5)]# 每个5x5正方形最多包含一个数字,i0和j0表示分为几组sq_c = [Distinct([X[5 * i0 + i][5 * j0 + j]                  for i in range(5) for j in range(5)])        for i0 in range(0) for j0 in range(0)]sudoku_c = cells_c + rows_c + cols_c + sq_c# 数独实例，我们用'5'表示空单元格instance = ((1,4,5,2,3),(3,0,5,1,5),(0,5,2,3,5),(5,3,5,5,5),(4,2,5,5,1))instance_c = [If(instance[i][j] == 5,                 True,                 X[i][j] == instance[i][j])              for i in range(5) for j in range(5)]s = Solver()s.add(sudoku_c + instance_c)if s.check() == sat:    m = s.model()    r = [[m.evaluate(X[i][j]) for j in range(5)]         for i in range(5)]    print_matrix(r)else:    print("failed to solve")</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>花指令</title>
      <link href="/2022/01/17/%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/01/17/%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.anquanke.com/post/id/208682">https://www.anquanke.com/post/id/208682</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SMC</title>
      <link href="/2022/01/17/SMC/"/>
      <url>/2022/01/17/SMC/</url>
      
        <content type="html"><![CDATA[<p>参考文章：<a href="https://www.anquanke.com/post/id/238645">https://www.anquanke.com/post/id/238645</a></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>SMC，是self-modifying-code的缩写 ，即自我修改的代码，通过程序运行后执行相关代码功能，对加密的代码数据进行解密，让其恢复正常功能</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>1、要有两个函数，一个用于加密，一个用于解密，两个是对应的</p><p>2、找到要SMC的代码地址，然后提前在程序开始的地方设置对该地址数据的解密函数</p><p>3、取出要进行SMC的代码的字节码，对其使用准备好的加密函数进行加密</p><p>4、用这串加密的数据替换原代码的字节码</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://buuoj.cn/challenges#[%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84]jocker">https://buuoj.cn/challenges#[%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84]jocker</a></p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>打开ida反编译看到</p><p><img src="/2022/01/17/SMC/1642563702820.png"></p><p>点进这个函数ida直接报错</p><p><img src="/2022/01/17/SMC/1642563778289.png"></p><p>查看汇编代码</p><p><img src="/2022/01/17/SMC/1642563800178.png"></p><p>点击函数跟进</p><p><img src="/2022/01/17/SMC/1642563901545.png"></p><p>发现一长串没被识别的数据段，这种情况可能是花指令导致，也可能是SMC，结合之前有一个循环异或，可以猜测是SMC，接下来有两种方法解密 </p><h2 id="使用IDC对加密数据进行解密"><a href="#使用IDC对加密数据进行解密" class="headerlink" title="使用IDC对加密数据进行解密"></a>使用IDC对加密数据进行解密</h2><p>首先要找到被加密数据段的初始地址以及加密数据段的长度，这里长度在for循环里面，初始位置</p><p><img src="/2022/01/17/SMC/1642566995107.png"></p><p>点击函数跳转</p><p><img src="/2022/01/17/SMC/1642567097998.png"></p><p>黄色段就是初始地址，可以看到这里函数入口并不是pop开始，所以也可以猜到被加密了</p><p>idc脚本如下(shift+f2)打开</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;idc.idc&gt;static main(){    auto addr = 0x401500;    auto i = 0;    for(i=0;i&lt;187;i++)    {        PatchByte(addr+i,Byte(addr+i)^0x41);    }}</code></pre><p>得到了解密的数据段</p><p><img src="/2022/01/17/SMC/1642567365432.png"></p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>因为程序自带解密函数，只需要在解密函数后面下断点，运行到断点处，被加密的数据段就能成功解密</p><p><img src="/2022/01/17/SMC/1642565058450.png"></p><p>这是未解密的，运行后</p><p><img src="/2022/01/17/SMC/1642565236932.png"></p><p>这时候只需要先对函数按U，取消定义，然后选中按C——force转为汇编代码</p><p><img src="/2022/01/17/SMC/1642565348450.png"></p><p>然后按p定义成函数，再按F5就可以正常反编译了</p><p><img src="/2022/01/17/SMC/1642565393714.png"></p><h1 id="SMC-反调试技术"><a href="#SMC-反调试技术" class="headerlink" title="SMC+反调试技术"></a>SMC+反调试技术</h1><p>因为smc可以采取动态调试来还原加密代码，所以可以采用反调试技术来阻止动态调试，所以这时候就需要绕过</p><h2 id="狗狗的秘密"><a href="#狗狗的秘密" class="headerlink" title="狗狗的秘密"></a>狗狗的秘密</h2><p><img src="/2022/01/17/SMC/1643034259013.png"></p><p>在数据段发现这里类型SMC，猜测是SMC自修改，所以需要定位到解密函数</p><p>在exports发现了一个函数</p><p>TLS回调函数会在oep也就是程序入口前执行</p><p><img src="/2022/01/17/SMC/1643034347085.png"></p><p>这个函数会在main函数之前执行，所以先进去看看</p><p><img src="/2022/01/17/SMC/1643034411621.png"></p><p>把鼠标放在上面发现他是个指针，被赋值为smc的函数段，v8同理，所以接下来这一段应该就是smc解密代码</p><p><img src="/2022/01/17/SMC/1643034535760.png"></p><p>很明显是tea，不会写idctea脚本，所以打算采取动调，但是前面有几个反调试，需要绕过，保证能走到解密代码这一步 </p><p><img src="/2022/01/17/SMC/1643034646186.png"></p><p>对于if语句，只需要用jnz或jz替换即可</p><p>所以相对来说还行，主要是要先定位到这里</p><p><img src="/2022/01/17/SMC/1643034751964.png"></p><p>也可以去这些函数列表看一看</p><p>动调完成还是发现出错，所以里面的值可能被引用修改，对着变量按x查看交叉引用</p><p><img src="/2022/01/17/SMC/1643034871276.png"></p><p>发现在此之前被修改过，但是动调的时候显示是0，很奇怪，不知道什么时候赋值的，所以第一次进入 tea函数需要先对dword_915168的值在hex窗口进行修改</p><p><img src="/2022/01/17/SMC/1643035000708.png"></p><p>要注意在这个窗口中数据以小端序存储</p><p>修改好之后，下好断点后f9让程序跑起来就可以了</p><p><img src="/2022/01/17/SMC/1643035086013.png"></p><p>之后就是前面说的，先取消定义，然后转为代码，再定义函数</p><p>寻找怎么修改hex值的时候发现了 可以添加查看窗口，就很方便，在VM逆向里面可能会看起来更方便</p><p><img src="/2022/01/17/SMC/1643035222239.png"></p><p><img src="/2022/01/17/SMC/1643035235237.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zip</title>
      <link href="/2022/01/15/zip/"/>
      <url>/2022/01/15/zip/</url>
      
        <content type="html"><![CDATA[<h1 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h1><h2 id="伪加密原理及操作"><a href="#伪加密原理及操作" class="headerlink" title="伪加密原理及操作"></a>伪加密原理及操作</h2><h3 id="zip文件组成"><a href="#zip文件组成" class="headerlink" title="zip文件组成"></a>zip文件组成</h3><p>可以去里面看看，挺全的</p><p><a href="https://blog.csdn.net/qq_26187985/article/details/83654197">https://blog.csdn.net/qq_26187985/article/details/83654197</a></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>这里找了一道大佬出的题，适合练练手</p><p>《美丽的烟火》</p><p>链接：<a href="http://ctf.bugku.com/challenges/detail/id/350.html">http://ctf.bugku.com/challenges/detail/id/350.html</a></p><p>直接打开压缩包，可以得到被加密的文件</p><p><img src="/2022/01/15/zip/1642245880907.png"></p><p>痛苦，一般这种没有提示的(下面会有介绍)，一般就是伪加密了。</p><p>拖进winhex，搜索504b0102（不知道为什么的速速去看前面那篇文章），这个按钮</p><p><img src="/2022/01/15/zip/1642246321198.png"></p><p>把09改成00，要仔细，这里有两个，我开始只看到一个</p><p><img src="/2022/01/15/zip/1642246469204.png"></p><p><img src="/2022/01/15/zip/1642246506196.png"></p><p>重新打开压缩包</p><p><img src="/2022/01/15/zip/1642246638206.png"></p><p>心情愉悦~</p><p>接下来就是进行解密了</p><p>这里不细讲了，不然就跑偏了，png文件是stegpy隐写，密码是shumu，stegpy安装应该会有问题，具体安装请看图片隐写</p><p><img src="/2022/01/15/zip/1642246877362.png"></p><p>password解密是base64，base58，栅栏，</p><p>这里推荐一篇博客</p><p>得到的字符串是aes的key，然后直接aes在线解密</p><p><img src="/2022/01/15/zip/1642247152438.png"></p><p>flag：flag{yX73nAutbBozYhge6d2flG}</p><p>网站也放这了：<a href="https://the-x.cn/cryptography/Aes.aspx">https://the-x.cn/cryptography/Aes.aspx</a></p><h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><p>winrar可以修复伪加密，不过是部分的</p><p><img src="/2022/01/15/zip/1642251859085.png"></p><p>点开上面的工具-&gt; 修复压缩文件</p><h1 id="套娃压缩包"><a href="#套娃压缩包" class="headerlink" title="套娃压缩包"></a>套娃压缩包</h1><p>顾名思义，就是压缩包套娃</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://buuoj.cn/challenges#[MRCTF2020]%E5%8D%83%E5%B1%82%E5%A5%97%E8%B7%AF">https://buuoj.cn/challenges#[MRCTF2020]%E5%8D%83%E5%B1%82%E5%A5%97%E8%B7%AF</a></p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><pre class="language-python" data-language="python"><code class="language-python">from PIL import Imagex = y = 200img = Image.new("RGB",(x,y))file = open('./qr.txt','r')for width in range(0,x):    for height in range(0,y):        line = file.readline()        rgb = line.replace('(','').replace(')','').split(',')        img.putpixel((width,height),(int(rgb[0]),int(rgb[1]),int(rgb[2])))img.save('flag.jpg')</code></pre><h1 id="CRC32爆破"><a href="#CRC32爆破" class="headerlink" title="CRC32爆破"></a>CRC32爆破</h1><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>CRC校验实用程序库 在数据存储和数据通讯领域，为了保证数据的正确，就不得不采用检错的手段。在诸多检错手段中，CRC是最著名的一种。CRC的全称是循环冗余校验。(这里还不是很懂，后续再看)</p><p>总之每个文件都有唯一的CRC32值，即便数据中一个bit发生变化，也会导致CRC32值不同。若是知道一段数据的长度和CRC32值，便可穷举数据，与其CRC32对照，以此达到暴力猜解的目的。但通常只适用于较小文本文件。</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>打开里面有很多压缩包，里面存储的都是小数据文件</p><p><img src="/2022/01/15/zip/1642249237942.png"></p><p><img src="/2022/01/15/zip/1642249207274.png"></p><p>直接上脚本(不是很会)</p><pre class="language-python" data-language="python"><code class="language-python">#python3import zipfileimport stringimport binasciidef CrackCrc(crc):for i in dic:for j in dic:for k in dic:for h in dic:s = i + j + k + hif crc == (binascii.crc32(s.encode())):f.write(s)returndef CrackZip():for i in range(0,68):file = 'D:\\new\\新建文件夹\\out'+str(i)+'.zip'crc = zipfile.ZipFile(file,'r').getinfo('data.txt').CRCCrackCrc(crc)print('\r'+"loading：{:%}".format(float((i+1)/68)),end='')dic = string.ascii_letters + string.digits + '+/='f = open('printaaa.txt','w')print("\nCRC32begin")CrackZip()print("CRC32finished")f.close()</code></pre><p>得到base64编码的东西</p><pre class="language-none"><code class="language-none">z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA==</code></pre><p>网站在线解码，这个网站挺好的，可以直接转换文件</p><p><a href="https://the-x.cn/base64/">https://the-x.cn/base64/</a></p><p>解码后在尾部看到这句话</p><p><img src="/2022/01/15/zip/1642250774952.png"></p><p>他让我们修复文件，所以我们首先要先了解文件头和尾</p><p><a href="https://blog.csdn.net/Ahuuua/article/details/109165473?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-2.queryctrv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-2.queryctrv2">https://blog.csdn.net/Ahuuua/article/details/109165473?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-2.queryctrv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-2.queryctrv2</a></p><p>修补好rar文件头在注释里得到flag</p><p>flag{nev3r_enc0de_t00_sm4ll_fil3_w1th_zip}</p><h1 id="压缩文件带注释"><a href="#压缩文件带注释" class="headerlink" title="压缩文件带注释"></a>压缩文件带注释</h1><p>有一些题目会在注释里面添加信息，直观的就不说了，现在说两种空白符，Whitespace <a href="https://vii5ard.github.io/whitespace/">https://vii5ard.github.io/whitespace/</a> 和snow隐写，snow需要密码，有可执行文件</p><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.yunyansec.com/#/experiment/expdetail/3">https://www.yunyansec.com/#/experiment/expdetail/3</a></p><p>无字天书</p><h2 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h2><p>得到流量包，导出HTTP对象</p><p>得到几个文件，依次查看，注意要仔细看，流量包文件有时候会很多</p><p><img src="/2022/01/15/zip/1642254197336.png"></p><p>发现了504b0304，可以写脚本，也可以直接网站解码得到压缩包</p><p><a href="https://the-x.cn/zh-cn/encodings/Hex.aspx">https://the-x.cn/zh-cn/encodings/Hex.aspx</a></p><p><img src="/2022/01/15/zip/1642254255927.png"></p><p>也可以使用脚本</p><pre class="language-python" data-language="python"><code class="language-python">s='填写16进制数据'import binasciiout=open('2.jpg','wb')out.write(binascii.unhexlify(s))out.close()#Author: MoChu7import structa = open("str.txt","r")#十六进制数据文件lines = a.read()res = [lines[i:i+2] for i in range(0,len(lines),2)]with open("res.jpg","wb") as f:for i in res:s = struct.pack('B',int(i,16))f.write(s)</code></pre><p>打开之后得到两个文件，打开里面什么都看不到，全选就会有显示，key.ws应该是snow的密码，拿去whitespace解密</p><p><img src="/2022/01/15/zip/1642254325041.png"></p><p>然后snow解密 命令：SNOW.EXE -p 密码 -C 文件</p><p><img src="/2022/01/15/zip/1642254470293.png"></p><p>cazy{C4n_y0u_underSt4nd_th3_b0oK_With0ut_Str1ng}</p><h1 id="爆破压缩包"><a href="#爆破压缩包" class="headerlink" title="爆破压缩包"></a>爆破压缩包</h1><p>使用工具爆破，如Advanced Archive Password Recovery</p><h2 id="已知明文攻击"><a href="#已知明文攻击" class="headerlink" title="已知明文攻击"></a>已知明文攻击</h2><h2 id="掩码攻击"><a href="#掩码攻击" class="headerlink" title="掩码攻击"></a>掩码攻击</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文档隐写</title>
      <link href="/2022/01/15/%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99/"/>
      <url>/2022/01/15/%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>可以看看这篇<a href="https://xz.aliyun.com/t/1883/">https://xz.aliyun.com/t/1883/</a></p><h1 id="WORD"><a href="#WORD" class="headerlink" title="WORD"></a>WORD</h1><h2 id="xml隐藏信息"><a href="#xml隐藏信息" class="headerlink" title="xml隐藏信息"></a>xml隐藏信息</h2><h2 id="隐藏文字"><a href="#隐藏文字" class="headerlink" title="隐藏文字"></a>隐藏文字</h2><h2 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h2><h1 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h1><h2 id="图片遮挡"><a href="#图片遮挡" class="headerlink" title="图片遮挡"></a>图片遮挡</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>视频隐写</title>
      <link href="/2022/01/15/%E8%A7%86%E9%A2%91%E9%9A%90%E5%86%99/"/>
      <url>/2022/01/15/%E8%A7%86%E9%A2%91%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Kinovea"><a href="#Kinovea" class="headerlink" title="Kinovea"></a>Kinovea</h1><p>可以一帧一帧地看视频，视频隐写目前只接触到在视频一些 帧里面藏信息</p><p><a href="https://mochu.blog.csdn.net/article/details/109461931">https://mochu.blog.csdn.net/article/details/109461931</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>流量分析</title>
      <link href="/2022/01/15/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>/2022/01/15/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>只试过直接导出HTTP流对象</p><p><img src="/2022/01/15/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/1642297780618.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内存取证</title>
      <link href="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
      <url>/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>volatility是内存取证的工具，这里我使用的是打包好了的可执行文件</p><p>volatility下载地址：<a href="https://www.volatilityfoundation.org/releases">https://www.volatilityfoundation.org/releases</a></p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642229196730.png"></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>题目链接：</p><p><a href="https://www.yunyansec.com/#/experiment/expdetail/3">https://www.yunyansec.com/#/experiment/expdetail/3</a></p><p>朴实无华的取证</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h2><p>先使用命令volatility -f 朴实无华的取证.raw iamgeinfo查看系统信息</p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642230119786.png"></p><p>上面的系统都有可能，主要是第一个</p><h2 id="查看运行程序列表"><a href="#查看运行程序列表" class="headerlink" title="查看运行程序列表"></a>查看运行程序列表</h2><p>命令：volatility -f 朴实无华的取证.raw –profile=WinXPSP2x86 pslist</p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642230482092.png"></p><p>这里有三处需要注意，mspaint是画图工具，360zip是解压工具，notepad是笔记本，接下来重点放在这几处</p><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>命令：volatility -f 朴实无华的取证.raw –profile=WinXPSP2x86  filescan，这里可以使用grep来指定搜索的字符串 格式如下：volatility -f 朴实无华的取证.raw –profile=WinXPSP2x86  filescan | grep flag</p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642230787104.png"></p><p>可以看到过滤出了flag的相关数据</p><h2 id="提取文件"><a href="#提取文件" class="headerlink" title="提取文件"></a>提取文件</h2><p>接下来需要把文件dump下来，命令：volatility -f 朴实无华的取证.raw –profile=WinXPSP2x86 dumpfiles -Q 偏移量 -D ./(-D指定文件夹，这里aaa表示存储到aaa文件夹中)</p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642231017652.png"></p><p>可以在aaa文件夹中找到dump下来的文件</p><p>得到<img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642231186454.png"></p><p>还有一个加了密的zip文件，这时候注意我们的notepad还没有被使用，可以去看看信息</p><h2 id="打开进程"><a href="#打开进程" class="headerlink" title="打开进程"></a>打开进程</h2><p>命令：volatility -f 朴实无华的取证.raw –profile=WinXPSP2x86 notepad</p><p><img src="/2022/01/15/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/1642231403984.png"></p><p>这样就得到了encrypt的密码</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;string.h&gt; int main(){char str[]="FDCB[8LDQ?ZLOO?FHUWDLQ)B?VXFFHHG?LQ?ILJKWLQJ?WKH?HSLGHPLF]";for(int i = 0; i &lt; strlen(str); i++){str[i] += 32;if(str[i] &gt;='a'+3 &amp;&amp; str[i]&lt;='w'+3)str[i]-=3;else if(str[i]=='a')str[i]='x';else if(str[i]=='b')str[i]='y';else if(str[i]=='c')str[i]='z';else if(str[i]=='|')str[i]='_';}printf("%s",str);return 0;}</code></pre><p>得到flag：cazy{Xian_will_certainIy_succeed_in_fighting_the_epidemic}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>音频隐写</title>
      <link href="/2022/01/15/%E9%9F%B3%E9%A2%91%E9%9A%90%E5%86%99/"/>
      <url>/2022/01/15/%E9%9F%B3%E9%A2%91%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>在这篇文章：<a href="https://blog.csdn.net/vanarrow/article/details/105667244">https://blog.csdn.net/vanarrow/article/details/105667244</a></p><h1 id="摩斯电码"><a href="#摩斯电码" class="headerlink" title="摩斯电码"></a>摩斯电码</h1><h1 id="MP3steg"><a href="#MP3steg" class="headerlink" title="MP3steg"></a>MP3steg</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图片隐写</title>
      <link href="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/"/>
      <url>/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="PNG和JPG文件结构"><a href="#PNG和JPG文件结构" class="headerlink" title="PNG和JPG文件结构"></a>PNG和JPG文件结构</h1><p>PNG：<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html">https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html</a>   （有题目需要修改PNG宽高），结尾是IEND</p><p>JPG：<a href="https://www.cnblogs.com/bandy/p/4956086.html">https://www.cnblogs.com/bandy/p/4956086.html</a></p><p>jpg的一些隐写：<a href="https://zhuanlan.zhihu.com/p/24054040">https://zhuanlan.zhihu.com/p/24054040</a></p><p>无论是png还是jpg，只会识别到文件尾，所以可以在文件尾加入信息</p><h1 id="F5隐写"><a href="#F5隐写" class="headerlink" title="F5隐写"></a>F5隐写</h1><h1 id="Stegpy隐写"><a href="#Stegpy隐写" class="headerlink" title="Stegpy隐写"></a>Stegpy隐写</h1><p>之前有过题了，就不说了，讲讲下载</p><p>看这篇就够了</p><p><a href="https://blog.csdn.net/Amherstieae/article/details/109010064">https://blog.csdn.net/Amherstieae/article/details/109010064</a></p><h1 id="Steghide"><a href="#Steghide" class="headerlink" title="Steghide"></a>Steghide</h1><p><a href="https://www.jianshu.com/p/c3679f805a0c">https://www.jianshu.com/p/c3679f805a0c</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#%E4%B9%9D%E8%BF%9E%E7%8E%AF">https://buuoj.cn/challenges#%E4%B9%9D%E8%BF%9E%E7%8E%AF</a></p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>binwalk分解文件</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642302431480.png"></p><p>伪加密</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642302894034.png"></p><p>得到图片和加密压缩包</p><p>对图片使用steghide</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642302996915.png"></p><p>steghide info 文件查看隐藏信息，输入y后提取，也可以直接：steghide extract 文件 </p><p>找到ko.txt,得到压缩包密码</p><p>flag{1RTo8w@&amp;4nK@z*XL}</p><h1 id="Binwalk、Winrar——图片隐藏文件"><a href="#Binwalk、Winrar——图片隐藏文件" class="headerlink" title="Binwalk、Winrar——图片隐藏文件"></a>Binwalk、Winrar——图片隐藏文件</h1><p>binwalk使用：<a href="https://blog.csdn.net/wxh0000mm/article/details/85683661">https://blog.csdn.net/wxh0000mm/article/details/85683661</a></p><p>可以直接binwalk提取文件，命令：binwalk -e 文件，这个比较常见，就不说了</p><p>winrar也可以直接打开被隐藏的文件</p><h1 id="修改图片宽高"><a href="#修改图片宽高" class="headerlink" title="修改图片宽高"></a>修改图片宽高</h1><pre class="language-python" data-language="python"><code class="language-python">import binasciiimport structimport sysfile = input("图片地址：")fr = open(file,'rb').read()data = bytearray(fr[0x0c:0x1d])crc32key = eval('0x'+str(binascii.b2a_hex(fr[0x1d:0x21]))[2:-1])#原来的代码: crc32key = eval(str(fr[29:33]).replace('\\x','').replace("b'",'0x').replace("'",''))n = 4095for w in range(n):    width = bytearray(struct.pack('&gt;i', w))    for h in range(n):        height = bytearray(struct.pack('&gt;i', h))        for x in range(4):            data[x+4] = width[x]            data[x+8] = height[x]        crc32result = binascii.crc32(data) &amp; 0xffffffff        if crc32result == crc32key:            print(width,height)            newpic = bytearray(fr)            for x in range(4):                newpic[x+16] = width[x]                newpic[x+20] = height[x]            fw = open(file+'.png','wb')            fw.write(newpic)            fw.close            sys.exit()</code></pre><h1 id="二进制转二维码"><a href="#二进制转二维码" class="headerlink" title="二进制转二维码"></a>二进制转二维码</h1><pre class="language-python" data-language="python"><code class="language-python">from PIL import Imagefrom zlib import *MAX = 25pic = Image.new("RGB",(MAX,MAX))str ='''0000000001110010000000000000000000001111010000000000000000011100010000000000000000010111100000000000000000001010101000000000000000000011000101000000000000000010101010100000000000000000100000110000000011000111011101101000110000001000010110010010010100010011110100001110111001100111101001010110010010011000001001100001001101000111100011111101110010100010110111110011011111101111000110110010010101101100100011110011111111111011100000000101100011000101000000000010010100101010001000000001010101010001100100000000001001111111100100000000000011001011110111000000000100110010010000100000000110000110110110010000000011010000101110101'''i=0for y in range(0,MAX):    for x in range(0,MAX):        if(str[i] == '1'):            pic.putpixel([x,y],(0,0,0))        else:pic.putpixel([x,y],(255,255,255))        i = i+1pic.show()pic.save("flag.png")</code></pre><h1 id="坐标画图"><a href="#坐标画图" class="headerlink" title="坐标画图"></a>坐标画图</h1><h2 id="gnuplot"><a href="#gnuplot" class="headerlink" title="gnuplot"></a>gnuplot</h2><p>linux，直接sudo apt install gnuplot，使用 直接gnuplot进入后，plot 文件名，就可以了</p><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#%E6%A2%85%E8%8A%B1%E9%A6%99%E4%B9%8B%E8%8B%A6%E5%AF%92%E6%9D%A5">https://buuoj.cn/challenges#%E6%A2%85%E8%8A%B1%E9%A6%99%E4%B9%8B%E8%8B%A6%E5%AF%92%E6%9D%A5</a></p><h2 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h2><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642300357300.png"></p><p>在文件尾之后发现大量十六进制数据，这里我使用010editor复制，这样比较快，复制后转为字符</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642300558126.png"></p><p>这样的格式不能被识别，所以需要替换，我使用的是VS</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642301030524.png"></p><p>替换这里不用填写，直接替换全部，然后保存到txt中，再使用工具</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642301392143.png"></p><h1 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h1><p>在stegsolve可以实现，逐帧查看，注意不要漏了</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642304858835.png"></p><h1 id="LSB隐写"><a href="#LSB隐写" class="headerlink" title="LSB隐写"></a>LSB隐写</h1><h1 id="文件头尾倒置"><a href="#文件头尾倒置" class="headerlink" title="文件头尾倒置"></a>文件头尾倒置</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.yunyansec.com/#/experiment/expdetail/3">https://www.yunyansec.com/#/experiment/expdetail/3</a></p><p>pipicc</p><h2 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h2><p>得到一张图片</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642303873774.png"></p><p>有噪点，应该是修改了像素点，是需要修复的</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306122403.png"></p><p>缺少png文件头，修补文件头</p><p>接下来找到IEND块,将多余部分删去，改为png</p><p>得到</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306518311.png"></p><p>拖进stegsolve</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306719043.png"></p><p>在蓝色低位发现了d9ff，这正好是jpg的文件尾反过来，save bin 下来，搜索d8ff，对应倒置的文件头</p><p>010editor有工具</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306907507.png"></p><p>需要安装</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306934016.png"></p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642306975753.png"></p><p>逆序后保存改为jpg后缀，得到图片</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642307072291.png"></p><p>也可以使用脚本</p><pre class="language-python" data-language="python"><code class="language-python">input = open('D:\\new\\5', 'rb')input_all = input.read()ss = input_all[::-1]output = open('m0re.jpg', 'wb')output.write(ss)input.close()output.close()</code></pre><h1 id="Base64隐写"><a href="#Base64隐写" class="headerlink" title="Base64隐写"></a>Base64隐写</h1><pre class="language-python" data-language="python"><code class="language-python">import base64path = input("请输入加密文件路径\n")file = open(path)a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"aaa = ''while True:    text = file.readline()  # 只读取一行内容    # 判断是否读取到内容    text = text.replace("\n", "")    if not text:        break    if text.count('=') == 1:        aaa = aaa + \            str('{:02b}'.format((a.find(text[len(text)-2])) % 4))    if text.count('=') == 2:        aaa = aaa + \            str('{:04b}'.format((a.find(text[len(text)-3])) % 16))file.close()t = ""ttt = len(aaa)ttt = ttt//8*8for i in range(0,ttt,8):    t = t + chr(int( aaa[i:i+8],2))print(t)</code></pre><h1 id="StegSolve"><a href="#StegSolve" class="headerlink" title="StegSolve"></a>StegSolve</h1><h2 id="两张图片拼接"><a href="#两张图片拼接" class="headerlink" title="两张图片拼接"></a>两张图片拼接</h2><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642312404099.png"></p><p>提取http对象</p><p>把scanlines拖进stegsolve，在多个通道发现了一条横线</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642312485498.png"></p><p>而logo正好缺了一段</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642312592372.png"></p><p>使用stegsolve的图像结合</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642312633974.png"></p><p>得到flag</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642312671617.png"></p><h1 id="添加文件头"><a href="#添加文件头" class="headerlink" title="添加文件头"></a>添加文件头</h1><h1 id="文件属性藏信息"><a href="#文件属性藏信息" class="headerlink" title="文件属性藏信息"></a>文件属性藏信息</h1><p>图片属性可以隐藏信息</p><h1 id="outguess隐写"><a href="#outguess隐写" class="headerlink" title="outguess隐写"></a>outguess隐写</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#[WUSTCTF2020]alison_likes_jojo">https://buuoj.cn/challenges#[WUSTCTF2020]alison_likes_jojo</a></p><h2 id="解题过程-3"><a href="#解题过程-3" class="headerlink" title="解题过程"></a>解题过程</h2><p>binwalk分解boki.png得到压缩包，是真加密</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642311449760.png"></p><p>尝试爆破</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642311499706.png"></p><p>得到一段字符串</p><p>base64三次得到killerqueen</p><p>另一张图片是outguess隐写</p><p><img src="/2022/01/15/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/1642311787198.png"></p><p>打开flag1.txt文件</p><p>wctf2020{pretty_girl_alison_likes_jojo}</p><h1 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h1><h2 id="BlindWaterMark"><a href="#BlindWaterMark" class="headerlink" title="BlindWaterMark"></a>BlindWaterMark</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>A&amp;D1</title>
      <link href="/2021/12/27/A-D1/"/>
      <url>/2021/12/27/A-D1/</url>
      
        <content type="html"><![CDATA[<h1 id="IsDebugger-Present"><a href="#IsDebugger-Present" class="headerlink" title="IsDebugger Present"></a>IsDebugger Present</h1><p><strong>原理</strong></p><hr><p>​          反调试，该API查询PEB结构中的IsDebugger标志位， 未调试返回0，调试状态返回1。</p><p><strong>绕过</strong></p><hr><ol><li><p>nop指令</p> <pre class="language-none"><code class="language-none">mov rax ; IsDebuggerPresentcall rax ; IsDebuggerPresent</code></pre></li><li><p>jnz和jz</p><hr><p> jnz在结果不为0时跳转，jz在结果为0时跳转</p> <pre class="language-none"><code class="language-none">sub_4019F4(){    return ISDebuggerPresent;}if(!sub_4019F4){     puts();}</code></pre><p> 这个时候如果处于调试状态，返回1，不会执行put，这时候只需要去汇编指令处把jnz改为jz，重新汇编后会变成</p> <pre class="language-none"><code class="language-none">sub_4019F4(){    return ISDebuggerPresent;}if(sub_4019F4){     puts();}</code></pre><p> 3.Attach to process</p> <pre class="language-none"><code class="language-none">sub_4019F4();printf("%d",n);scanf("%d",&amp;m);</code></pre><p> 可以先让程序运行，这时候已经步过了反调试函数，然后Attach to process就可以调试了</p><p> 4.修改EIP：jump、call、ret指令</p></li></ol><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ol><li><p>函数介绍</p> <pre class="language-none"><code class="language-none">1 CreateThread 创建线程2 CloseHandle 关闭线程3 WaitForSingleObject() 实现线程转换</code></pre></li></ol><p>​      2.题目——Youngter drive</p><pre class="language-none"><code class="language-none">int __cdecl main_0(int argc, const char **argv, const char **envp){  HANDLE v4; // [esp+D0h] [ebp-14h]  HANDLE hObject; // [esp+DCh] [ebp-8h]  ((void (*)(void))sub_4110FF)();  ::hObject = CreateMutexW(0, 0, 0);  j_strcpy(Destination, &amp;Source);  hObject = CreateThread(0, 0, StartAddress, 0, 0, 0);  v4 = CreateThread(0, 0, sub_41119F, 0, 0, 0);  CloseHandle(hObject);  CloseHandle(v4);  while ( dword_418008 != -1 )    ;  sub_411190();  CloseHandle(::hObject);  return 0;}</code></pre><pre class="language-none"><code class="language-none">void __stdcall StartAddress_0(int a1){  while ( 1 )  {    WaitForSingleObject(hObject, 0xFFFFFFFF);    if ( dword_418008 &gt; -1 )    {      sub_41112C(&amp;Source, dword_418008);      --dword_418008;      Sleep(0x64u);    }    ReleaseMutex(hObject);  }}</code></pre><pre class="language-none"><code class="language-none">void __stdcall sub_411B10(int a1){  while ( 1 )  {    WaitForSingleObject(hObject, 0xFFFFFFFF);    if ( dword_418008 &gt; -1 )    {      Sleep(0x64u);      --dword_418008;    }    ReleaseMutex(hObject);  }}</code></pre><p>实际上就是每隔两位对数组元素做一次处理</p><h1 id="Z3"><a href="#Z3" class="headerlink" title="Z3"></a>Z3</h1><ol><li><p>基础</p> <pre class="language-none"><code class="language-none">1 声明整数x = Int('x')2 声明实数x = Real('x')3 声明布尔类型x = Bool('x')1 创建solver求解器   例：s = Solver()2 添加约束条件   例：s.add(x+y==10)3 检查solver中的约束是否满足   例：s.check()4 利用model()输出运算结果   例：s.model()</code></pre><p> 2.题目——Universe_final_answer</p> <pre class="language-none"><code class="language-none">__int64 __fastcall main(int a1, char **a2, char **a3){  char v4[32]; // [rsp+0h] [rbp-A8h] BYREF  char input[104]; // [rsp+20h] [rbp-88h] BYREF  unsigned __int64 v6; // [rsp+88h] [rbp-20h]  v6 = __readfsqword(0x28u);  __printf_chk(1LL, "Please give me the key string:", a3);  scanf("%s", input);  if ( sub_860(input) )  {    sub_C50(input, v4);    __printf_chk(1LL, "Judgement pass! flag is actf{%s_%s}\n", input);  }  else  {    puts("False key!");  }  return 0LL;}</code></pre> <pre class="language-none"><code class="language-none">bool __fastcall sub_860(char *input){  int v1; // ecx  int v2; // esi  int v3; // edx  int v4; // er9  int v5; // er11  int v6; // ebp  int v7; // ebx  int v8; // er8  int v9; // er10  bool result; // al  int v11; // [rsp+0h] [rbp-38h]  v1 = input[1];  v2 = *input;  v3 = input[2];  v4 = input[3];  v5 = input[4];  v6 = input[6];  v7 = input[5];  v8 = input[7];  v9 = input[8];  result = 0;  if ( -85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613 )  {    v11 = input[9];    if ( 30 * v11 + -70 * v9 + -122 * v6 + -81 * v7 + -66 * v5 + -115 * v4 + -41 * v3 + -86 * v1 - 15 * v2 - 30 * v8 == -54400      &amp;&amp; -103 * v11 + 120 * v8 + 108 * v7 + 48 * v4 + -89 * v3 + 78 * v1 - 41 * v2 + 31 * v5 - (v6 &lt;&lt; 6) - 120 * v9 == -10283      &amp;&amp; 71 * v6 + (v7 &lt;&lt; 7) + 99 * v5 + -111 * v3 + 85 * v1 + 79 * v2 - 30 * v4 - 119 * v8 + 48 * v9 - 16 * v11 == 22855      &amp;&amp; 5 * v11 + 23 * v9 + 122 * v8 + -19 * v6 + 99 * v7 + -117 * v5 + -69 * v3 + 22 * v1 - 98 * v2 + 10 * v4 == -2944      &amp;&amp; -54 * v11 + -23 * v8 + -82 * v3 + -85 * v2 + 124 * v1 - 11 * v4 - 8 * v5 - 60 * v7 + 95 * v6 + 100 * v9 == -2222      &amp;&amp; -83 * v11 + -111 * v7 + -57 * v2 + 41 * v1 + 73 * v3 - 18 * v4 + 26 * v5 + 16 * v6 + 77 * v8 - 63 * v9 == -13258      &amp;&amp; 81 * v11 + -48 * v9 + 66 * v8 + -104 * v6 + -121 * v7 + 95 * v5 + 85 * v4 + 60 * v3 + -85 * v2 + 80 * v1 == -1559      &amp;&amp; 101 * v11 + -85 * v9 + 7 * v6 + 117 * v7 + -83 * v5 + -101 * v4 + 90 * v3 + -28 * v1 + 18 * v2 - v8 == 6308 )    {      result = 99 * v11 + -28 * v9 + 5 * v8 + 93 * v6 + -18 * v7 + -127 * v5 + 6 * v4 + -9 * v3 + -93 * v1 + 58 * v2 == -1697;    }  }  return result;}</code></pre><p> 脚本</p> <pre class="language-none"><code class="language-none">from z3 import*s=Solver()v1=Int('v1')v2=Int('v2')v3=Int('v3')v4=Int('v4')v5=Int('v5')v6=Int('v6')v7=Int('v7')v8=Int('v8')v9=Int('v9')v11=Int('v11')s.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)s.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)s.add(-103 * v11 + 120 * v8 + 108 * v7 + 48 * v4 + -89 * v3 + 78 * v1 - 41 * v2 + 31 * v5 - (v6 *64) - 120 * v9 == -10283)s.add(71 * v6 + (v7 *128) + 99 * v5 + -111 * v3 + 85 * v1 + 79 * v2 - 30 * v4 - 119 * v8 + 48 * v9 - 16 * v11 == 22855)s.add(5 * v11 + 23 * v9 + 122 * v8 + -19 * v6 + 99 * v7 + -117 * v5 + -69 * v3 + 22 * v1 - 98 * v2 + 10 * v4 == -2944)s.add(-54 * v11 + -23 * v8 + -82 * v3 + -85 * v2 + 124 * v1 - 11 * v4 - 8 * v5 - 60 * v7 + 95 * v6 + 100 * v9 == -2222)s.add(-83 * v11 + -111 * v7 + -57 * v2 + 41 * v1 + 73 * v3 - 18 * v4 + 26 * v5 + 16 * v6 + 77 * v8 - 63 * v9 == -13258)s.add(81 * v11 + -48 * v9 + 66 * v8 + -104 * v6 + -121 * v7 + 95 * v5 + 85 * v4 + 60 * v3 + -85 * v2 + 80 * v1 == -1559)s.add(101 * v11 + -85 * v9 + 7 * v6 + 117 * v7 + -83 * v5 + -101 * v4 + 90 * v3 + -28 * v1 + 18 * v2 - v8 == 6308)s.add(99 * v11 + -28 * v9 + 5 * v8 + 93 * v6 + -18 * v7 + -127 * v5 + 6 * v4 + -9 * v3 + -93 * v1 + 58 * v2 == -1697)if s.check()==sat:    result=s.model()print(result)</code></pre><p> 这里的移位操作不能被识别，需要手动转换。</p><p> 其实这道题带了个简单的混淆</p> <pre class="language-none"><code class="language-none">unsigned __int64 __fastcall sub_C50(const char *a1, _BYTE *a2){  size_t v4; // rax  unsigned int v5; // edx  int v6; // edi  int v7; // ecx  __int64 v8; // r8  __int128 *v9; // rsi  unsigned int v10; // ecx  int v11; // eax  int v12; // edi  int v13; // edx  int v14; // eax  _BYTE *v15; // rsi  _BYTE *v16; // rcx  _BYTE *v17; // r8  int *i; // rax  unsigned __int64 result; // rax  __int128 v20[2]; // [rsp+0h] [rbp-48h] BYREF  __int64 v21; // [rsp+20h] [rbp-28h]  unsigned __int64 v22; // [rsp+28h] [rbp-20h]  v22 = __readfsqword(0x28u);  v20[0] = 0LL;  v21 = 0LL;  v20[1] = 0LL;  v4 = strlen(a1);  v5 = 0;  v6 = 9;  while ( v5 &lt; v4 )  {    v7 = a1[v5++];    v6 ^= v7;  }  if ( v6 )  {    v8 = 0LL;    v9 = v20;    while ( 1 )    {      v9 = (__int128 *)((char *)v9 + 4);      v10 = v8 + 1;      v11 = v6 / 10;      v12 = v6 % 10;      *((_DWORD *)v9 - 1) = v12;      LOBYTE(v13) = v12;      v6 = v11;      if ( !v11 )        break;      v8 = v10;    }    v14 = v8 - 1;    v15 = a2;    v16 = &amp;a2[v10];    v17 = &amp;a2[v8];    for ( i = (int *)v20 + v14; ; --i )    {      *v15 = v13 + 48;      if ( v17 == v15 )        break;      v13 = *i;      ++v15;    }  }  else  {    v16 = a2;  }  result = __readfsqword(0x28u) ^ v22;  *v16 = 0;  return result;}</code></pre><p> 这里面的函数没有对输入进行处理，所以不用管</p></li></ol><h1 id="修改二进制文件汇编指令"><a href="#修改二进制文件汇编指令" class="headerlink" title="修改二进制文件汇编指令"></a>修改二进制文件汇编指令</h1><p>1.题目——Overlong</p><p>运行程序，得到</p><pre class="language-none"><code class="language-none">I never broke the encoding：</code></pre><pre class="language-none"><code class="language-none">int __stdcall start(int a1, int a2, int a3, int a4){  CHAR Text[128]; // [esp+0h] [ebp-84h] BYREF  int v6; // [esp+80h] [ebp-4h]  v6 = sub_401160(Text, &amp;unk_402008, 28);  Text[v6] = 0;  MessageBoxA(0, Text, Caption, 0);  return 0;}</code></pre><p>这里只取出了TEXT的前28位，而程序运行后的输出长度正好是28，加上题目overlong提示和：结尾，猜测部分长度没显示</p><p>所以需要修改二进制文件汇编指令</p><pre class="language-none"><code class="language-none">.text:004011C0                 push    ebp.text:004011C1                 mov     ebp, esp.text:004011C3                 sub     esp, 84h.text:004011C9                 push    1Ch.text:004011CB                 push    offset unk_402008.text:004011D0                 lea     eax, [ebp+Text]</code></pre><p>1c对应28，所以需要将1c改大</p><p>1、ida修改–&gt; 点击菜单项“Edit”–“Patch program”–“Assemble” –&gt; 点击菜单项“Edit”–“Patch program”–“Apply patches to input file”，在弹出的对话框中点击OK按钮，则成功完成指令修改。</p><p>点击确认按钮时，可能会弹出无法写入对话框，只需去除该文件的只读属性，再次执行第三步即可。</p><p>2、OD修改–&gt;根据汇编指令定位–&gt;右键–&gt;二进制–&gt;编辑 ,其他的可以直接修改指令，但是这里修改之后后面的汇编代码全变了，虽然不知道为啥。</p><p>3、winhex修改–&gt;定位——先去ida的patch byte找到push 1c对应6A 1C 68 08 20 40 00 8D 85 7C FF FF FF 50 E8 84–&gt;去winhex修改1c，然后重新保存运行</p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>1、题目——Signin</p><pre class="language-none"><code class="language-none">__int64 __fastcall main(int a1, char **a2, char **a3){  char v4[16]; // [rsp+0h] [rbp-4A0h] BYREF  char v5[16]; // [rsp+10h] [rbp-490h] BYREF  char v6[16]; // [rsp+20h] [rbp-480h] BYREF  char v7[16]; // [rsp+30h] [rbp-470h] BYREF  char v8[112]; // [rsp+40h] [rbp-460h] BYREF  char v9[1000]; // [rsp+B0h] [rbp-3F0h] BYREF  unsigned __int64 v10; // [rsp+498h] [rbp-8h]  v10 = __readfsqword(0x28u);  puts("[sign in]");  printf("[input your flag]: ");  __isoc99_scanf("%99s", v8);  sub_96A(v8, v9);//加密函数直接linux远调就可以知道是转十六进制数；  __gmpz_init_set_str(v7, "ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35", 16LL);//十六进制  __gmpz_init_set_str(v6, v9, 16LL);  __gmpz_init_set_str(v4, "103461035900816914121390101299049044413950405173712170434161686539878160984549", 10LL);//十进制  __gmpz_init_set_str(v5, "65537", 10LL);  __gmpz_powm(v6, v6, v5, v4);  if ( (unsigned int)__gmpz_cmp(v6, v7) )    puts("GG!");  else    puts("TTTTTTTTTTql!");  return 0LL;}</code></pre><p>看到65537，加上查了__gmpz_powm()函数，也相当于__mpz_powm()函数，可以判断这是rsa加密</p><pre class="language-none"><code class="language-none">void mpz_powm (mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod) [Function]Set rop to base^exp mod mod.</code></pre><p> 其实就是计算 base 的 exp 次方，并对 mod 取模，最后将结果写入 rop 中 </p><p>剩下的就是解出p、q，然后写脚本了</p><pre class="language-none"><code class="language-none">C=M^E mod NC是密文，M是明文，E是公钥（E和 φ(N)互为质数），N是公共模数（质数 P 、Q相乘得到N），MOD就是模运算M=C^D mod N求D：E * D % φ(N) = 1    φ(N) = (P-1)(Q-1)   </code></pre><p>2、rsa</p><p>题目给出了公钥和flag.enc文件</p><pre class="language-none"><code class="language-none">(N,e)是公钥， (N, d)是私钥</code></pre><p>公钥和密钥生成</p><pre class="language-none"><code class="language-none">4.1 求N我们准备两个很小对质数，p ＝ 17q ＝ 19N ＝ p ＊ q ＝ 3234.2 求LL ＝ lcm（p－1， q－1）＝ lcm(16，18） ＝ 144144为16和18对最小公倍数4.3 求E求E必须要满足2个条件：1 &lt; E &lt; L ，gcd（E，L）=1即1 &lt; E &lt; 144，gcd（E，144） ＝ 1 #gcd，最大公因数E和144互为质数，5显然满足上述2个条件故E ＝ 5        此时公钥=(E，N）＝ （5，323）4.4 求D求D也必须满足2个条件：1 &lt; D &lt; L，E＊D mod L ＝ 1即1 &lt; D &lt; 144，5 ＊ D mod 144 ＝ 1显然当D＝ 29 时满足上述两个条件1 &lt; 29 &lt; 1445＊29 mod 144 ＝ 145 mod 144 ＝ 1此时私钥＝（D，N）＝（29，323）</code></pre><p>私钥和公钥都可以拿去解析</p><p>这里解析得到</p><pre class="language-none"><code class="language-none">e = 65537n=86934482296048119190666062003494800588905656017203025617216654058378322103517(n拿去分解)p = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463</code></pre><p>从文件读取公钥或者私钥</p><pre class="language-none"><code class="language-none">with open('private.pem', mode='rb') as privatefile:keydata = privatefile.read()#rb 是以二进制形式打开文件privkey = rsa.PrivateKey.load_pkcs1(keydata)</code></pre><pre class="language-none"><code class="language-none">import gmpy2 import rsa  e = 65537n = 86934482296048119190666062003494800588905656017203025617216654058378322103517p = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463phin = (q-1)*(p-1)d = gmpy2.invert(e, phin)key = rsa.PrivateKey(n, e, int(d), p, q)#生成私钥with open("D:\\new\\题目\\output\\flag.enc", "rb+") as f:    f = f.read()    print(rsa.decrypt(f, key))</code></pre><h1 id="Maze"><a href="#Maze" class="headerlink" title="Maze"></a>Maze</h1><p>Maze题一般都需要找到入口、出口还有移动方向</p><p>题目——unctf20201—easymaze</p><pre class="language-none"><code class="language-none">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 *v3; // rax  char *v4; // rdi  unsigned __int64 v5; // rbx  const char *v6; // rdx  int v7; // eax  int v8; // er9  int v9; // er8  int v10; // edx  char v11; // cl  int v12; // ecx  int v13; // ecx  __int64 *v14; // rax  sub_1400011A0(argc, argv, envp);  dword_140006790[0] = 1;#把鼠标放上去显示int型  dword_140006794 = 1;  dword_1400067B4 = 1;  dword_1400067CC = 1;  dword_1400067EC = 1;  dword_1400067F0 = 1;  dword_1400067D4 = 1;  dword_1400067D8 = 1;  dword_1400067F8 = 1;  dword_140006810 = 1;  dword_14000682C = 1;  dword_140006844 = 1;  dword_140006840 = 1;  dword_140006864 = 1;  dword_140006868 = 1;  dword_140006884 = 1;  dword_1400068A0 = 1;  dword_1400068BC = 1;  dword_1400068DC = 1;  dword_14000689C = 1;  v3 = sub_140001800(std::cout, (__int64)"Plz inpu7 the P4th :");  std::ostream::operator&lt;&lt;(v3, sub_1400019D0);  v4 = input;  v5 = -1i64;  sub_140001AA0(std::cin, -1i64, input);  do    ++v5;  while ( input[v5] );  if ( v5 &gt; 0x11 )  {    v6 = "to0 lon9!t0o long!";    goto LABEL_26;  }  if ( v5 &lt; 0x11 )  {    v6 = (const char *)&amp;unk_140003770;    goto LABEL_26;  }  v7 = dword_140006710;  v8 = 0;  v9 = dword_140006714;  v10 = dword_140006710;  do  {    v11 = *v4;    if ( *v4 == 'A' )      goto LABEL_21;    if ( v11 == 'W' )    {      ++v10;      v12 = v7 % 2;      ++v7;      goto LABEL_20;    }    if ( v11 == 'E' )    {      ++v10;      v13 = v7 % 2;      ++v7;LABEL_16:      dword_140006710 = v7;      if ( v13 )        goto LABEL_23;      goto LABEL_17;    }    if ( v11 != 'D' )    {      if ( v11 != 'X' )      {        if ( v11 != 'Z' )        {          v6 = "What the fuck did you give me?";          goto LABEL_26;        }        --v10;        v12 = v7 % 2;        --v7;LABEL_20:        dword_140006710 = v7;        if ( !v12 )          goto LABEL_23;LABEL_21:        --v9;        goto LABEL_22;      }      --v10;      v13 = v7 % 2;      --v7;      goto LABEL_16;    }LABEL_17:    ++v9;LABEL_22:    dword_140006714 = v9;LABEL_23:    ++v8;    ++v4;  }  while ( v8 &lt; v5 );  v6 = "Congratulations on this forced to get the right flag, you entered is the correct answer!";    if ( dword_140006790[7 * v7 + v9] != 1 )        v6 = "Try it again little unlucky!";LABEL_26:  v14 = sub_140001800(std::cout, (__int64)v6);  std::ostream::operator&lt;&lt;(v14, sub_1400019D0);  return 0;}</code></pre><p>动调就可以把AWEDXZ的移动弄出来</p><p>在ida里面dd表示四个字节，db表示一个字节</p><pre class="language-none"><code class="language-none">data:00007FF673BF6794 dword_7FF673BF6794 dd 0                 ; DATA XREF: main+27↑w.data:00007FF673BF6798 dd 0.data:00007FF673BF679C db    0.data:00007FF673BF679D db    0.data:00007FF673BF679E db    0.data:00007FF673BF679F db    0.data:00007FF673BF67A0 db    0.data:00007FF673BF67A1 db    0.data:00007FF673BF67A2 db    0.data:00007FF673BF67A3 db    0.data:00007FF673BF67A4 db    0.data:00007FF673BF67A5 db    0.data:00007FF673BF67A6 db    0.data:00007FF673BF67A7 db    0</code></pre><p>要对着db按D转换数据类型，全部转为int型</p><h1 id="base64变表"><a href="#base64变表" class="headerlink" title="base64变表"></a>base64变表</h1><p>1、base64变表实际上就是将base64编码表进行了修改</p><p>2、题目——nctf2021 shadowbringer</p><pre class="language-none"><code class="language-none">int __cdecl main(int argc, const char **argv, const char **envp){  char v4[16]; // [rsp+20h] [rbp-60h] BYREF  char v5[15]; // [rsp+30h] [rbp-50h] BYREF  char v6; // [rsp+3Fh] [rbp-41h] BYREF  char v7[16]; // [rsp+40h] [rbp-40h] BYREF  char v8[16]; // [rsp+50h] [rbp-30h] BYREF  char v9[16]; // [rsp+60h] [rbp-20h] BYREF  char v10[32]; // [rsp+70h] [rbp-10h] BYREF  _main();  youknowwhat();  std::string::string((std::string *)v5);  std::allocator&lt;char&gt;::allocator(&amp;v6);  std::string::string(v4, "U&gt;F2UsQXN`5sXMELT=:7M_2&lt;X]^1ThaWF0=KM?9IUhAsTM5:T==_Ns&amp;&lt;Vhb!", &amp;v6);  std::allocator&lt;char&gt;::~allocator(&amp;v6);  std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(printf_0, "Welcome.Please input your flag:\n");  std::operator&gt;&gt;&lt;char&gt;(scanf, (std::string *)v5);  std::string::string((std::string *)v8, (const std::string *)v5);    Emet(v7, v8);    std::string::operator=(v5, v7);  std::string::~string((std::string *)v7);  std::string::~string((std::string *)v8);  std::string::string((std::string *)v10, (const std::string *)v5);    Selch(v9, v10);    std::string::operator=(v5, v9);                 std::string::~string((std::string *)v9);  std::string::~string((std::string *)v10);  if ( (unsigned __int8)std::operator==&lt;char&gt;(v5, v4) )    std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(printf_0, "Right.");  else    std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(printf_0, "Wrong.");  std::string::~string((std::string *)v4);  std::string::~string((std::string *)v5);  return 0;}</code></pre><pre class="language-none"><code class="language-none">std::string *__fastcall Emet(std::string *a1, std::string *a2){  int i; // ebx  char *v3; // rax  unsigned __int64 v4; // rax  int j; // ebx  unsigned int v6; // eax  char *v7; // rax  unsigned __int64 v9; // [rsp+20h] [rbp-90h] BYREF  char v10; // [rsp+2Eh] [rbp-82h] BYREF  char v11; // [rsp+2Fh] [rbp-81h] BYREF  char v12[16]; // [rsp+30h] [rbp-80h] BYREF  char v13[16]; // [rsp+40h] [rbp-70h] BYREF  char v14[16]; // [rsp+50h] [rbp-60h] BYREF  char v15[16]; // [rsp+60h] [rbp-50h] BYREF  char v16[16]; // [rsp+70h] [rbp-40h] BYREF  char v17[16]; // [rsp+80h] [rbp-30h] BYREF  char v18[16]; // [rsp+90h] [rbp-20h] BYREF  char v19[16]; // [rsp+A0h] [rbp-10h] BYREF  std::allocator&lt;char&gt;::allocator(&amp;v10);  std::string::string(&amp;v9, &amp;unk_48A000, &amp;v10);  std::allocator&lt;char&gt;::~allocator(&amp;v10);  std::allocator&lt;char&gt;::allocator(&amp;v11);  std::string::string(a1, &amp;unk_48A000, &amp;v11);  std::allocator&lt;char&gt;::~allocator(&amp;v11);  for ( i = 0; i &lt; (unsigned __int64)std::string::size(a2); ++i )  {    v3 = (char *)std::string::operator[](a2, i);    std::bitset&lt;8ull&gt;::bitset(v14, (unsigned int)*v3);    std::bitset&lt;8ull&gt;::to_string(v13, v14);    std::operator+&lt;char&gt;(v12, &amp;v9, v13);    std::string::operator=(&amp;v9, v12);    std::string::~string((std::string *)v12);    std::string::~string((std::string *)v13);  }  while ( 1 )  {    v4 = std::string::size((std::string *)&amp;v9);    if ( v4 == 6 * (v4 / 6) )      break;    std::operator+&lt;char&gt;(v15, &amp;v9, 48i64);    std::string::operator=(&amp;v9, v15);    std::string::~string((std::string *)v15);  }  for ( j = 0; j &lt; (unsigned __int64)std::string::size((std::string *)&amp;v9); j += 6 )  {    std::string::substr((std::string *)v18, (unsigned __int64)&amp;v9, j);    std::bitset&lt;6ull&gt;::bitset&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(v17, v18, 0i64);    v6 = std::bitset&lt;6ull&gt;::to_ulong(v17);    v7 = (char *)std::string::operator[](&amp;hisoralce, v6);    std::operator+&lt;char&gt;(v16, a1, (unsigned int)*v7);    std::string::operator=(a1, v16);    std::string::~string((std::string *)v16);    std::string::~string((std::string *)v18);  }  while ( (std::string::size(a1) &amp; 3) != 0 )  {    std::operator+&lt;char&gt;(v19, a1, 33i64);    std::string::operator=(a1, v19);    std::string::~string((std::string *)v19);  }  std::string::~string((std::string *)&amp;v9);  return a1;}</code></pre><p>这里的j+=6，像是base64，而&amp;hisorale是指针</p><pre class="language-none"><code class="language-none">bss:00000000004AA030 hisoralce db  28h ; (                   ; DATA XREF: youknowwhat(void)+2A↑o.bss:00000000004AA030                                         ; youknowwhat(void)+40↑o ....bss:00000000004AA031 db  3Dh ; =.bss:00000000004AA032 db 0BBh.bss:00000000004AA033 db    0.bss:00000000004AA034 db    0.bss:00000000004AA035 db    0.bss:00000000004AA036 db    0.bss:00000000004AA037 db    0</code></pre><p>需要对着db按d转换类型，才能看到该地址存储的内容</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
