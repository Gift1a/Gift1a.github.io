<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://gift1a.github.io/atom.xml" rel="self"/>
  
  <link href="https://gift1a.github.io/"/>
  <updated>2021-12-27T14:49:04.825Z</updated>
  <id>https://gift1a.github.io/</id>
  
  <author>
    <name>Gift1a</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A&amp;D1</title>
    <link href="https://gift1a.github.io/2021/12/27/A-D1/"/>
    <id>https://gift1a.github.io/2021/12/27/A-D1/</id>
    <published>2021-12-27T14:48:27.485Z</published>
    <updated>2021-12-27T14:49:04.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IsDebugger-Present"><a href="#IsDebugger-Present" class="headerlink" title="IsDebugger Present"></a>IsDebugger Present</h1><p><strong>原理</strong></p><hr><p>​          反调试，该API查询PEB结构中的IsDebugger标志位， 未调试返回0，调试状态返回1。</p><p><strong>绕过</strong></p><hr><ol><li><p>nop指令</p><pre><code>mov rax ; IsDebuggerPresentcall rax ; IsDebuggerPresent</code></pre></li><li><p>jnz和jz</p><hr><p> jnz在结果不为0时跳转，jz在结果为0时跳转</p><pre><code>sub_4019F4(){    return ISDebuggerPresent;}if(!sub_4019F4){     puts();}</code></pre><p> 这个时候如果处于调试状态，返回1，不会执行put，这时候只需要去汇编指令处把jnz改为jz，重新汇编后会变成</p><pre><code>sub_4019F4(){    return ISDebuggerPresent;}if(sub_4019F4){     puts();}</code></pre><p> 3.Attach to process</p><pre><code>sub_4019F4();printf("%d",n);scanf("%d",&amp;m);</code></pre><p> 可以先让程序运行，这时候已经步过了反调试函数，然后Attach to process就可以调试了</p><p> 4.修改EIP：jump、call、ret指令</p></li></ol><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ol><li><p>函数介绍</p><pre><code>1 CreateThread 创建线程2 CloseHandle 关闭线程3 WaitForSingleObject() 实现线程转换</code></pre></li></ol><p>​      2.题目——Youngter drive</p><pre><code>int __cdecl main_0(int argc, const char **argv, const char **envp){  HANDLE v4; // [esp+D0h] [ebp-14h]  HANDLE hObject; // [esp+DCh] [ebp-8h]  ((void (*)(void))sub_4110FF)();  ::hObject = CreateMutexW(0, 0, 0);  j_strcpy(Destination, &amp;Source);  hObject = CreateThread(0, 0, StartAddress, 0, 0, 0);  v4 = CreateThread(0, 0, sub_41119F, 0, 0, 0);  CloseHandle(hObject);  CloseHandle(v4);  while ( dword_418008 != -1 )    ;  sub_411190();  CloseHandle(::hObject);  return 0;}</code></pre><pre><code>void __stdcall StartAddress_0(int a1){  while ( 1 )  {    WaitForSingleObject(hObject, 0xFFFFFFFF);    if ( dword_418008 &gt; -1 )    {      sub_41112C(&amp;Source, dword_418008);      --dword_418008;      Sleep(0x64u);    }    ReleaseMutex(hObject);  }}</code></pre><pre><code>void __stdcall sub_411B10(int a1){  while ( 1 )  {    WaitForSingleObject(hObject, 0xFFFFFFFF);    if ( dword_418008 &gt; -1 )    {      Sleep(0x64u);      --dword_418008;    }    ReleaseMutex(hObject);  }}</code></pre><p>实际上就是每隔两位对数组元素做一次处理</p><h1 id="Z3"><a href="#Z3" class="headerlink" title="Z3"></a>Z3</h1><ol><li><p>基础</p><pre><code>1 声明整数x = Int('x')2 声明实数x = Real('x')3 声明布尔类型x = Bool('x')1 创建solver求解器   例：s = Solver()2 添加约束条件   例：s.add(x+y==10)3 检查solver中的约束是否满足   例：s.check()4 利用model()输出运算结果   例：s.model()</code></pre><p> 2.题目——Universe_final_answer</p><pre><code>__int64 __fastcall main(int a1, char **a2, char **a3){  char v4[32]; // [rsp+0h] [rbp-A8h] BYREF  char input[104]; // [rsp+20h] [rbp-88h] BYREF  unsigned __int64 v6; // [rsp+88h] [rbp-20h]  v6 = __readfsqword(0x28u);  __printf_chk(1LL, "Please give me the key string:", a3);  scanf("%s", input);  if ( sub_860(input) )  {    sub_C50(input, v4);    __printf_chk(1LL, "Judgement pass! flag is actf{%s_%s}\n", input);  }  else  {    puts("False key!");  }  return 0LL;}</code></pre><pre><code>bool __fastcall sub_860(char *input){  int v1; // ecx  int v2; // esi  int v3; // edx  int v4; // er9  int v5; // er11  int v6; // ebp  int v7; // ebx  int v8; // er8  int v9; // er10  bool result; // al  int v11; // [rsp+0h] [rbp-38h]  v1 = input[1];  v2 = *input;  v3 = input[2];  v4 = input[3];  v5 = input[4];  v6 = input[6];  v7 = input[5];  v8 = input[7];  v9 = input[8];  result = 0;  if ( -85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613 )  {    v11 = input[9];    if ( 30 * v11 + -70 * v9 + -122 * v6 + -81 * v7 + -66 * v5 + -115 * v4 + -41 * v3 + -86 * v1 - 15 * v2 - 30 * v8 == -54400      &amp;&amp; -103 * v11 + 120 * v8 + 108 * v7 + 48 * v4 + -89 * v3 + 78 * v1 - 41 * v2 + 31 * v5 - (v6 &lt;&lt; 6) - 120 * v9 == -10283      &amp;&amp; 71 * v6 + (v7 &lt;&lt; 7) + 99 * v5 + -111 * v3 + 85 * v1 + 79 * v2 - 30 * v4 - 119 * v8 + 48 * v9 - 16 * v11 == 22855      &amp;&amp; 5 * v11 + 23 * v9 + 122 * v8 + -19 * v6 + 99 * v7 + -117 * v5 + -69 * v3 + 22 * v1 - 98 * v2 + 10 * v4 == -2944      &amp;&amp; -54 * v11 + -23 * v8 + -82 * v3 + -85 * v2 + 124 * v1 - 11 * v4 - 8 * v5 - 60 * v7 + 95 * v6 + 100 * v9 == -2222      &amp;&amp; -83 * v11 + -111 * v7 + -57 * v2 + 41 * v1 + 73 * v3 - 18 * v4 + 26 * v5 + 16 * v6 + 77 * v8 - 63 * v9 == -13258      &amp;&amp; 81 * v11 + -48 * v9 + 66 * v8 + -104 * v6 + -121 * v7 + 95 * v5 + 85 * v4 + 60 * v3 + -85 * v2 + 80 * v1 == -1559      &amp;&amp; 101 * v11 + -85 * v9 + 7 * v6 + 117 * v7 + -83 * v5 + -101 * v4 + 90 * v3 + -28 * v1 + 18 * v2 - v8 == 6308 )    {      result = 99 * v11 + -28 * v9 + 5 * v8 + 93 * v6 + -18 * v7 + -127 * v5 + 6 * v4 + -9 * v3 + -93 * v1 + 58 * v2 == -1697;    }  }  return result;}</code></pre><p> 脚本</p><pre><code>from z3 import*s=Solver()v1=Int('v1')v2=Int('v2')v3=Int('v3')v4=Int('v4')v5=Int('v5')v6=Int('v6')v7=Int('v7')v8=Int('v8')v9=Int('v9')v11=Int('v11')s.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)s.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)s.add(-103 * v11 + 120 * v8 + 108 * v7 + 48 * v4 + -89 * v3 + 78 * v1 - 41 * v2 + 31 * v5 - (v6 *64) - 120 * v9 == -10283)s.add(71 * v6 + (v7 *128) + 99 * v5 + -111 * v3 + 85 * v1 + 79 * v2 - 30 * v4 - 119 * v8 + 48 * v9 - 16 * v11 == 22855)s.add(5 * v11 + 23 * v9 + 122 * v8 + -19 * v6 + 99 * v7 + -117 * v5 + -69 * v3 + 22 * v1 - 98 * v2 + 10 * v4 == -2944)s.add(-54 * v11 + -23 * v8 + -82 * v3 + -85 * v2 + 124 * v1 - 11 * v4 - 8 * v5 - 60 * v7 + 95 * v6 + 100 * v9 == -2222)s.add(-83 * v11 + -111 * v7 + -57 * v2 + 41 * v1 + 73 * v3 - 18 * v4 + 26 * v5 + 16 * v6 + 77 * v8 - 63 * v9 == -13258)s.add(81 * v11 + -48 * v9 + 66 * v8 + -104 * v6 + -121 * v7 + 95 * v5 + 85 * v4 + 60 * v3 + -85 * v2 + 80 * v1 == -1559)s.add(101 * v11 + -85 * v9 + 7 * v6 + 117 * v7 + -83 * v5 + -101 * v4 + 90 * v3 + -28 * v1 + 18 * v2 - v8 == 6308)s.add(99 * v11 + -28 * v9 + 5 * v8 + 93 * v6 + -18 * v7 + -127 * v5 + 6 * v4 + -9 * v3 + -93 * v1 + 58 * v2 == -1697)if s.check()==sat:    result=s.model()print(result)</code></pre><p> 这里的移位操作不能被识别，需要手动转换。</p><p> 其实这道题带了个简单的混淆</p><pre><code>unsigned __int64 __fastcall sub_C50(const char *a1, _BYTE *a2){  size_t v4; // rax  unsigned int v5; // edx  int v6; // edi  int v7; // ecx  __int64 v8; // r8  __int128 *v9; // rsi  unsigned int v10; // ecx  int v11; // eax  int v12; // edi  int v13; // edx  int v14; // eax  _BYTE *v15; // rsi  _BYTE *v16; // rcx  _BYTE *v17; // r8  int *i; // rax  unsigned __int64 result; // rax  __int128 v20[2]; // [rsp+0h] [rbp-48h] BYREF  __int64 v21; // [rsp+20h] [rbp-28h]  unsigned __int64 v22; // [rsp+28h] [rbp-20h]  v22 = __readfsqword(0x28u);  v20[0] = 0LL;  v21 = 0LL;  v20[1] = 0LL;  v4 = strlen(a1);  v5 = 0;  v6 = 9;  while ( v5 &lt; v4 )  {    v7 = a1[v5++];    v6 ^= v7;  }  if ( v6 )  {    v8 = 0LL;    v9 = v20;    while ( 1 )    {      v9 = (__int128 *)((char *)v9 + 4);      v10 = v8 + 1;      v11 = v6 / 10;      v12 = v6 % 10;      *((_DWORD *)v9 - 1) = v12;      LOBYTE(v13) = v12;      v6 = v11;      if ( !v11 )        break;      v8 = v10;    }    v14 = v8 - 1;    v15 = a2;    v16 = &amp;a2[v10];    v17 = &amp;a2[v8];    for ( i = (int *)v20 + v14; ; --i )    {      *v15 = v13 + 48;      if ( v17 == v15 )        break;      v13 = *i;      ++v15;    }  }  else  {    v16 = a2;  }  result = __readfsqword(0x28u) ^ v22;  *v16 = 0;  return result;}</code></pre><p> 这里面的函数没有对输入进行处理，所以不用管</p></li></ol><h1 id="修改二进制文件汇编指令"><a href="#修改二进制文件汇编指令" class="headerlink" title="修改二进制文件汇编指令"></a>修改二进制文件汇编指令</h1><p>1.题目——Overlong</p><p>运行程序，得到</p><pre><code>I never broke the encoding：</code></pre><pre><code>int __stdcall start(int a1, int a2, int a3, int a4){  CHAR Text[128]; // [esp+0h] [ebp-84h] BYREF  int v6; // [esp+80h] [ebp-4h]  v6 = sub_401160(Text, &amp;unk_402008, 28);  Text[v6] = 0;  MessageBoxA(0, Text, Caption, 0);  return 0;}</code></pre><p>这里只取出了TEXT的前28位，而程序运行后的输出长度正好是28，加上题目overlong提示和：结尾，猜测部分长度没显示</p><p>所以需要修改二进制文件汇编指令</p><pre><code>.text:004011C0                 push    ebp.text:004011C1                 mov     ebp, esp.text:004011C3                 sub     esp, 84h.text:004011C9                 push    1Ch.text:004011CB                 push    offset unk_402008.text:004011D0                 lea     eax, [ebp+Text]</code></pre><p>1c对应28，所以需要将1c改大</p><p>1、ida修改–&gt; 点击菜单项“Edit”–“Patch program”–“Assemble” –&gt; 点击菜单项“Edit”–“Patch program”–“Apply patches to input file”，在弹出的对话框中点击OK按钮，则成功完成指令修改。</p><p>点击确认按钮时，可能会弹出无法写入对话框，只需去除该文件的只读属性，再次执行第三步即可。</p><p>2、OD修改–&gt;根据汇编指令定位–&gt;右键–&gt;二进制–&gt;编辑 ,其他的可以直接修改指令，但是这里修改之后后面的汇编代码全变了，虽然不知道为啥。</p><p>3、winhex修改–&gt;定位——先去ida的patch byte找到push 1c对应6A 1C 68 08 20 40 00 8D 85 7C FF FF FF 50 E8 84–&gt;去winhex修改1c，然后重新保存运行</p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>1、题目——Signin</p><pre><code>__int64 __fastcall main(int a1, char **a2, char **a3){  char v4[16]; // [rsp+0h] [rbp-4A0h] BYREF  char v5[16]; // [rsp+10h] [rbp-490h] BYREF  char v6[16]; // [rsp+20h] [rbp-480h] BYREF  char v7[16]; // [rsp+30h] [rbp-470h] BYREF  char v8[112]; // [rsp+40h] [rbp-460h] BYREF  char v9[1000]; // [rsp+B0h] [rbp-3F0h] BYREF  unsigned __int64 v10; // [rsp+498h] [rbp-8h]  v10 = __readfsqword(0x28u);  puts("[sign in]");  printf("[input your flag]: ");  __isoc99_scanf("%99s", v8);  sub_96A(v8, v9);//加密函数直接linux远调就可以知道是转十六进制数；  __gmpz_init_set_str(v7, "ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35", 16LL);//十六进制  __gmpz_init_set_str(v6, v9, 16LL);  __gmpz_init_set_str(v4, "103461035900816914121390101299049044413950405173712170434161686539878160984549", 10LL);//十进制  __gmpz_init_set_str(v5, "65537", 10LL);  __gmpz_powm(v6, v6, v5, v4);  if ( (unsigned int)__gmpz_cmp(v6, v7) )    puts("GG!");  else    puts("TTTTTTTTTTql!");  return 0LL;}</code></pre><p>看到65537，加上查了__gmpz_powm()函数，也相当于__mpz_powm()函数，可以判断这是rsa加密</p><pre><code>void mpz_powm (mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod) [Function]Set rop to base^exp mod mod.</code></pre><p> 其实就是计算 base 的 exp 次方，并对 mod 取模，最后将结果写入 rop 中 </p><p>剩下的就是解出p、q，然后写脚本了</p><pre><code>C=M^E mod NC是密文，M是明文，E是公钥（E和 φ(N)互为质数），N是公共模数（质数 P 、Q相乘得到N），MOD就是模运算M=C^D mod N求D：E * D % φ(N) = 1    φ(N) = (P-1)(Q-1)   </code></pre><p>2、rsa</p><p>题目给出了公钥和flag.enc文件</p><pre><code>(N,e)是公钥， (N, d)是私钥</code></pre><p>公钥和密钥生成</p><pre><code>4.1 求N我们准备两个很小对质数，p ＝ 17q ＝ 19N ＝ p ＊ q ＝ 3234.2 求LL ＝ lcm（p－1， q－1）＝ lcm(16，18） ＝ 144144为16和18对最小公倍数4.3 求E求E必须要满足2个条件：1 &lt; E &lt; L ，gcd（E，L）=1即1 &lt; E &lt; 144，gcd（E，144） ＝ 1 #gcd，最大公因数E和144互为质数，5显然满足上述2个条件故E ＝ 5        此时公钥=(E，N）＝ （5，323）4.4 求D求D也必须满足2个条件：1 &lt; D &lt; L，E＊D mod L ＝ 1即1 &lt; D &lt; 144，5 ＊ D mod 144 ＝ 1显然当D＝ 29 时满足上述两个条件1 &lt; 29 &lt; 1445＊29 mod 144 ＝ 145 mod 144 ＝ 1此时私钥＝（D，N）＝（29，323）</code></pre><p>私钥和公钥都可以拿去解析</p><p>这里解析得到</p><pre><code>e = 65537n=86934482296048119190666062003494800588905656017203025617216654058378322103517(n拿去分解)p = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463</code></pre><p>从文件读取公钥或者私钥</p><pre><code>with open('private.pem', mode='rb') as privatefile:    keydata = privatefile.read()#rb 是以二进制形式打开文件privkey = rsa.PrivateKey.load_pkcs1(keydata)</code></pre><pre><code>import gmpy2 import rsa  e = 65537n = 86934482296048119190666062003494800588905656017203025617216654058378322103517p = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463phin = (q-1)*(p-1)d = gmpy2.invert(e, phin)key = rsa.PrivateKey(n, e, int(d), p, q)#生成私钥with open("D:\\new\\题目\\output\\flag.enc", "rb+") as f:    f = f.read()    print(rsa.decrypt(f, key))</code></pre><h1 id="Maze"><a href="#Maze" class="headerlink" title="Maze"></a>Maze</h1><p>Maze题一般都需要找到入口、出口还有移动方向</p><p>题目——unctf20201—easymaze</p><pre><code>int __cdecl main(int argc, const char **argv, const char **envp){  __int64 *v3; // rax  char *v4; // rdi  unsigned __int64 v5; // rbx  const char *v6; // rdx  int v7; // eax  int v8; // er9  int v9; // er8  int v10; // edx  char v11; // cl  int v12; // ecx  int v13; // ecx  __int64 *v14; // rax  sub_1400011A0(argc, argv, envp);  dword_140006790[0] = 1;#把鼠标放上去显示int型  dword_140006794 = 1;  dword_1400067B4 = 1;  dword_1400067CC = 1;  dword_1400067EC = 1;  dword_1400067F0 = 1;  dword_1400067D4 = 1;  dword_1400067D8 = 1;  dword_1400067F8 = 1;  dword_140006810 = 1;  dword_14000682C = 1;  dword_140006844 = 1;  dword_140006840 = 1;  dword_140006864 = 1;  dword_140006868 = 1;  dword_140006884 = 1;  dword_1400068A0 = 1;  dword_1400068BC = 1;  dword_1400068DC = 1;  dword_14000689C = 1;  v3 = sub_140001800(std::cout, (__int64)"Plz inpu7 the P4th :");  std::ostream::operator&lt;&lt;(v3, sub_1400019D0);  v4 = input;  v5 = -1i64;  sub_140001AA0(std::cin, -1i64, input);  do    ++v5;  while ( input[v5] );  if ( v5 &gt; 0x11 )  {    v6 = "to0 lon9!t0o long!";    goto LABEL_26;  }  if ( v5 &lt; 0x11 )  {    v6 = (const char *)&amp;unk_140003770;    goto LABEL_26;  }  v7 = dword_140006710;  v8 = 0;  v9 = dword_140006714;  v10 = dword_140006710;  do  {    v11 = *v4;    if ( *v4 == 'A' )      goto LABEL_21;    if ( v11 == 'W' )    {      ++v10;      v12 = v7 % 2;      ++v7;      goto LABEL_20;    }    if ( v11 == 'E' )    {      ++v10;      v13 = v7 % 2;      ++v7;LABEL_16:      dword_140006710 = v7;      if ( v13 )        goto LABEL_23;      goto LABEL_17;    }    if ( v11 != 'D' )    {      if ( v11 != 'X' )      {        if ( v11 != 'Z' )        {          v6 = "What the fuck did you give me?";          goto LABEL_26;        }        --v10;        v12 = v7 % 2;        --v7;LABEL_20:        dword_140006710 = v7;        if ( !v12 )          goto LABEL_23;LABEL_21:        --v9;        goto LABEL_22;      }      --v10;      v13 = v7 % 2;      --v7;      goto LABEL_16;    }LABEL_17:    ++v9;LABEL_22:    dword_140006714 = v9;LABEL_23:    ++v8;    ++v4;  }  while ( v8 &lt; v5 );  v6 = "Congratulations on this forced to get the right flag, you entered is the correct answer!";    if ( dword_140006790[7 * v7 + v9] != 1 )        v6 = "Try it again little unlucky!";LABEL_26:  v14 = sub_140001800(std::cout, (__int64)v6);  std::ostream::operator&lt;&lt;(v14, sub_1400019D0);  return 0;}</code></pre><p>动调就可以把AWEDXZ的移动弄出来</p><p>在ida里面dd表示四个字节，db表示一个字节</p><pre><code>data:00007FF673BF6794 dword_7FF673BF6794 dd 0                 ; DATA XREF: main+27↑w.data:00007FF673BF6798 dd 0.data:00007FF673BF679C db    0.data:00007FF673BF679D db    0.data:00007FF673BF679E db    0.data:00007FF673BF679F db    0.data:00007FF673BF67A0 db    0.data:00007FF673BF67A1 db    0.data:00007FF673BF67A2 db    0.data:00007FF673BF67A3 db    0.data:00007FF673BF67A4 db    0.data:00007FF673BF67A5 db    0.data:00007FF673BF67A6 db    0.data:00007FF673BF67A7 db    0</code></pre><p>要对着db按D转换数据类型，全部转为int型</p><h1 id="base64变表"><a href="#base64变表" class="headerlink" title="base64变表"></a>base64变表</h1><p>1、base64变表实际上就是将base64编码表进行了修改</p><p>2、题目——nctf2021 shadowbringer</p><pre><code>int __cdecl main(int argc, const char **argv, const char **envp){  char v4[16]; // [rsp+20h] [rbp-60h] BYREF  char v5[15]; // [rsp+30h] [rbp-50h] BYREF  char v6; // [rsp+3Fh] [rbp-41h] BYREF  char v7[16]; // [rsp+40h] [rbp-40h] BYREF  char v8[16]; // [rsp+50h] [rbp-30h] BYREF  char v9[16]; // [rsp+60h] [rbp-20h] BYREF  char v10[32]; // [rsp+70h] [rbp-10h] BYREF  _main();  youknowwhat();  std::string::string((std::string *)v5);  std::allocator&lt;char&gt;::allocator(&amp;v6);  std::string::string(v4, "U&gt;F2UsQXN`5sXMELT=:7M_2&lt;X]^1ThaWF0=KM?9IUhAsTM5:T==_Ns&amp;&lt;Vhb!", &amp;v6);  std::allocator&lt;char&gt;::~allocator(&amp;v6);  std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(printf_0, "Welcome.Please input your flag:\n");  std::operator&gt;&gt;&lt;char&gt;(scanf, (std::string *)v5);  std::string::string((std::string *)v8, (const std::string *)v5);    Emet(v7, v8);    std::string::operator=(v5, v7);  std::string::~string((std::string *)v7);  std::string::~string((std::string *)v8);  std::string::string((std::string *)v10, (const std::string *)v5);    Selch(v9, v10);    std::string::operator=(v5, v9);                 std::string::~string((std::string *)v9);  std::string::~string((std::string *)v10);  if ( (unsigned __int8)std::operator==&lt;char&gt;(v5, v4) )    std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(printf_0, "Right.");  else    std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(printf_0, "Wrong.");  std::string::~string((std::string *)v4);  std::string::~string((std::string *)v5);  return 0;}</code></pre><pre><code>std::string *__fastcall Emet(std::string *a1, std::string *a2){  int i; // ebx  char *v3; // rax  unsigned __int64 v4; // rax  int j; // ebx  unsigned int v6; // eax  char *v7; // rax  unsigned __int64 v9; // [rsp+20h] [rbp-90h] BYREF  char v10; // [rsp+2Eh] [rbp-82h] BYREF  char v11; // [rsp+2Fh] [rbp-81h] BYREF  char v12[16]; // [rsp+30h] [rbp-80h] BYREF  char v13[16]; // [rsp+40h] [rbp-70h] BYREF  char v14[16]; // [rsp+50h] [rbp-60h] BYREF  char v15[16]; // [rsp+60h] [rbp-50h] BYREF  char v16[16]; // [rsp+70h] [rbp-40h] BYREF  char v17[16]; // [rsp+80h] [rbp-30h] BYREF  char v18[16]; // [rsp+90h] [rbp-20h] BYREF  char v19[16]; // [rsp+A0h] [rbp-10h] BYREF  std::allocator&lt;char&gt;::allocator(&amp;v10);  std::string::string(&amp;v9, &amp;unk_48A000, &amp;v10);  std::allocator&lt;char&gt;::~allocator(&amp;v10);  std::allocator&lt;char&gt;::allocator(&amp;v11);  std::string::string(a1, &amp;unk_48A000, &amp;v11);  std::allocator&lt;char&gt;::~allocator(&amp;v11);  for ( i = 0; i &lt; (unsigned __int64)std::string::size(a2); ++i )  {    v3 = (char *)std::string::operator[](a2, i);    std::bitset&lt;8ull&gt;::bitset(v14, (unsigned int)*v3);    std::bitset&lt;8ull&gt;::to_string(v13, v14);    std::operator+&lt;char&gt;(v12, &amp;v9, v13);    std::string::operator=(&amp;v9, v12);    std::string::~string((std::string *)v12);    std::string::~string((std::string *)v13);  }  while ( 1 )  {    v4 = std::string::size((std::string *)&amp;v9);    if ( v4 == 6 * (v4 / 6) )      break;    std::operator+&lt;char&gt;(v15, &amp;v9, 48i64);    std::string::operator=(&amp;v9, v15);    std::string::~string((std::string *)v15);  }  for ( j = 0; j &lt; (unsigned __int64)std::string::size((std::string *)&amp;v9); j += 6 )  {    std::string::substr((std::string *)v18, (unsigned __int64)&amp;v9, j);    std::bitset&lt;6ull&gt;::bitset&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(v17, v18, 0i64);    v6 = std::bitset&lt;6ull&gt;::to_ulong(v17);    v7 = (char *)std::string::operator[](&amp;hisoralce, v6);    std::operator+&lt;char&gt;(v16, a1, (unsigned int)*v7);    std::string::operator=(a1, v16);    std::string::~string((std::string *)v16);    std::string::~string((std::string *)v18);  }  while ( (std::string::size(a1) &amp; 3) != 0 )  {    std::operator+&lt;char&gt;(v19, a1, 33i64);    std::string::operator=(a1, v19);    std::string::~string((std::string *)v19);  }  std::string::~string((std::string *)&amp;v9);  return a1;}</code></pre><p>这里的j+=6，像是base64，而&amp;hisorale是指针</p><pre><code>bss:00000000004AA030 hisoralce db  28h ; (                   ; DATA XREF: youknowwhat(void)+2A↑o.bss:00000000004AA030                                         ; youknowwhat(void)+40↑o ....bss:00000000004AA031 db  3Dh ; =.bss:00000000004AA032 db 0BBh.bss:00000000004AA033 db    0.bss:00000000004AA034 db    0.bss:00000000004AA035 db    0.bss:00000000004AA036 db    0.bss:00000000004AA037 db    0</code></pre><p>需要对着db按d转换类型，才能看到该地址存储的内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IsDebugger-Present&quot;&gt;&lt;a href=&quot;#IsDebugger-Present&quot; class=&quot;headerlink&quot; title=&quot;IsDebugger Present&quot;&gt;&lt;/a&gt;IsDebugger Present&lt;/h1&gt;&lt;p&gt;&lt;stron</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://gift1a.github.io/2021/12/27/hello-world/"/>
    <id>https://gift1a.github.io/2021/12/27/hello-world/</id>
    <published>2021-12-26T16:03:42.053Z</published>
    <updated>2021-12-27T14:43:07.320Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
